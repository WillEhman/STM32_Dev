
blink_with_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003058  08003058  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003058  08003058  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  0800306c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  0800306c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fb2  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000158c  00000000  00000000  00029fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008b0  00000000  00000000  0002bee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000260b9  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007fea  00000000  00000000  00052851  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f22c2  00000000  00000000  0005a83b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cafd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  0014cb78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003000 	.word	0x08003000

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003000 	.word	0x08003000

080001c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d2:	2003      	movs	r0, #3
 80001d4:	f001 fcc8 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 f80d 	bl	80001f8 <HAL_InitTick>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80001e4:	2301      	movs	r3, #1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	e001      	b.n	80001ee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80001ea:	f002 fddb 	bl	8002da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80001ee:	79fb      	ldrb	r3, [r7, #7]
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000200:	2300      	movs	r3, #0
 8000202:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <HAL_InitTick+0x68>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d022      	beq.n	8000252 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800020c:	4b15      	ldr	r3, [pc, #84]	; (8000264 <HAL_InitTick+0x6c>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <HAL_InitTick+0x68>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000218:	fbb1 f3f3 	udiv	r3, r1, r3
 800021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f001 fcd6 	bl	8001bd2 <HAL_SYSTICK_Config>
 8000226:	4603      	mov	r3, r0
 8000228:	2b00      	cmp	r3, #0
 800022a:	d10f      	bne.n	800024c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b0f      	cmp	r3, #15
 8000230:	d809      	bhi.n	8000246 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000232:	2200      	movs	r2, #0
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	f04f 30ff 	mov.w	r0, #4294967295
 800023a:	f001 fca0 	bl	8001b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <HAL_InitTick+0x70>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	6013      	str	r3, [r2, #0]
 8000244:	e007      	b.n	8000256 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000246:	2301      	movs	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
 800024a:	e004      	b.n	8000256 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800024c:	2301      	movs	r3, #1
 800024e:	73fb      	strb	r3, [r7, #15]
 8000250:	e001      	b.n	8000256 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000256:	7bfb      	ldrb	r3, [r7, #15]
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000004 	.word	0x20000004
 8000264:	20000008 	.word	0x20000008
 8000268:	20000000 	.word	0x20000000

0800026c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <HAL_IncTick+0x1c>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <HAL_IncTick+0x20>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4413      	add	r3, r2
 800027a:	4a03      	ldr	r2, [pc, #12]	; (8000288 <HAL_IncTick+0x1c>)
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000028 	.word	0x20000028
 800028c:	20000004 	.word	0x20000004

08000290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  return uwTick;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_GetTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000028 	.word	0x20000028

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	f7ff ffee 	bl	8000290 <HAL_GetTick>
 80002b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002c0:	d004      	beq.n	80002cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_Delay+0x40>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	bf00      	nop
 80002ce:	f7ff ffdf 	bl	8000290 <HAL_GetTick>
 80002d2:	4602      	mov	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x26>
  {
  }
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004

080002ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	431a      	orrs	r2, r3
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	609a      	str	r2, [r3, #8]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000312:	b480      	push	{r7}
 8000314:	b083      	sub	sp, #12
 8000316:	af00      	add	r7, sp, #0
 8000318:	6078      	str	r0, [r7, #4]
 800031a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	431a      	orrs	r2, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	609a      	str	r2, [r3, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000354:	b490      	push	{r4, r7}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
 8000360:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3360      	adds	r3, #96	; 0x60
 8000366:	461a      	mov	r2, r3
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	009b      	lsls	r3, r3, #2
 800036c:	4413      	add	r3, r2
 800036e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000370:	6822      	ldr	r2, [r4, #0]
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <LL_ADC_SetOffset+0x40>)
 8000374:	4013      	ands	r3, r2
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800037c:	683a      	ldr	r2, [r7, #0]
 800037e:	430a      	orrs	r2, r1
 8000380:	4313      	orrs	r3, r2
 8000382:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000386:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bc90      	pop	{r4, r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	03fff000 	.word	0x03fff000

08000398 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000398:	b490      	push	{r4, r7}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3360      	adds	r3, #96	; 0x60
 80003a6:	461a      	mov	r2, r3
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	4413      	add	r3, r2
 80003ae:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80003b0:	6823      	ldr	r3, [r4, #0]
 80003b2:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc90      	pop	{r4, r7}
 80003be:	4770      	bx	lr

080003c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80003c0:	b490      	push	{r4, r7}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	60f8      	str	r0, [r7, #12]
 80003c8:	60b9      	str	r1, [r7, #8]
 80003ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3360      	adds	r3, #96	; 0x60
 80003d0:	461a      	mov	r2, r3
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003da:	6823      	ldr	r3, [r4, #0]
 80003dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc90      	pop	{r4, r7}
 80003ee:	4770      	bx	lr

080003f0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000400:	2b00      	cmp	r3, #0
 8000402:	d101      	bne.n	8000408 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000404:	2301      	movs	r3, #1
 8000406:	e000      	b.n	800040a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000408:	2300      	movs	r3, #0
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000416:	b490      	push	{r4, r7}
 8000418:	b084      	sub	sp, #16
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	3330      	adds	r3, #48	; 0x30
 8000426:	461a      	mov	r2, r3
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0a1b      	lsrs	r3, r3, #8
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	f003 030c 	and.w	r3, r3, #12
 8000432:	4413      	add	r3, r2
 8000434:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000436:	6822      	ldr	r2, [r4, #0]
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	f003 031f 	and.w	r3, r3, #31
 800043e:	211f      	movs	r1, #31
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	401a      	ands	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	0e9b      	lsrs	r3, r3, #26
 800044c:	f003 011f 	and.w	r1, r3, #31
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	f003 031f 	and.w	r3, r3, #31
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bc90      	pop	{r4, r7}
 8000466:	4770      	bx	lr

08000468 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000474:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d101      	bne.n	8000480 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800047c:	2301      	movs	r3, #1
 800047e:	e000      	b.n	8000482 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800048e:	b490      	push	{r4, r7}
 8000490:	b084      	sub	sp, #16
 8000492:	af00      	add	r7, sp, #0
 8000494:	60f8      	str	r0, [r7, #12]
 8000496:	60b9      	str	r1, [r7, #8]
 8000498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3314      	adds	r3, #20
 800049e:	461a      	mov	r2, r3
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	0e5b      	lsrs	r3, r3, #25
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	f003 0304 	and.w	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004ae:	6822      	ldr	r2, [r4, #0]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	0d1b      	lsrs	r3, r3, #20
 80004b4:	f003 031f 	and.w	r3, r3, #31
 80004b8:	2107      	movs	r1, #7
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	43db      	mvns	r3, r3
 80004c0:	401a      	ands	r2, r3
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	0d1b      	lsrs	r3, r3, #20
 80004c6:	f003 031f 	and.w	r3, r3, #31
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	fa01 f303 	lsl.w	r3, r1, r3
 80004d0:	4313      	orrs	r3, r2
 80004d2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc90      	pop	{r4, r7}
 80004dc:	4770      	bx	lr
	...

080004e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004f8:	43db      	mvns	r3, r3
 80004fa:	401a      	ands	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0318 	and.w	r3, r3, #24
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000504:	40d9      	lsrs	r1, r3
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	400b      	ands	r3, r1
 800050a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800050e:	431a      	orrs	r2, r3
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	0007ffff 	.word	0x0007ffff

08000528 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f003 031f 	and.w	r3, r3, #31
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	6093      	str	r3, [r2, #8]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000598:	d101      	bne.n	800059e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80005bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80005e8:	d101      	bne.n	80005ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 0201 	orr.w	r2, r3, #1
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b01      	cmp	r3, #1
 8000636:	d101      	bne.n	800063c <LL_ADC_IsEnabled+0x18>
 8000638:	2301      	movs	r3, #1
 800063a:	e000      	b.n	800063e <LL_ADC_IsEnabled+0x1a>
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800065a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800065e:	f043 0204 	orr.w	r2, r3, #4
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	2b04      	cmp	r3, #4
 8000684:	d101      	bne.n	800068a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d101      	bne.n	80006b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e134      	b.n	8000944 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d109      	bne.n	80006fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f002 fb7f 	bl	8002dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff3f 	bl	8000584 <LL_ADC_IsDeepPowerDownEnabled>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff25 	bl	8000560 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff5a 	bl	80005d4 <LL_ADC_IsInternalRegulatorEnabled>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d113      	bne.n	800074e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff3e 	bl	80005ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000730:	4b86      	ldr	r3, [pc, #536]	; (800094c <HAL_ADC_Init+0x28c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	099b      	lsrs	r3, r3, #6
 8000736:	4a86      	ldr	r2, [pc, #536]	; (8000950 <HAL_ADC_Init+0x290>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000740:	e002      	b.n	8000748 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	3b01      	subs	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f9      	bne.n	8000742 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff3e 	bl	80005d4 <LL_ADC_IsInternalRegulatorEnabled>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10d      	bne.n	800077a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000762:	f043 0210 	orr.w	r2, r3, #16
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800076e:	f043 0201 	orr.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff77 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	2b00      	cmp	r3, #0
 8000790:	f040 80cf 	bne.w	8000932 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 80cb 	bne.w	8000932 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007a4:	f043 0202 	orr.w	r2, r3, #2
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff37 	bl	8000624 <LL_ADC_IsEnabled>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d115      	bne.n	80007e8 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007bc:	4865      	ldr	r0, [pc, #404]	; (8000954 <HAL_ADC_Init+0x294>)
 80007be:	f7ff ff31 	bl	8000624 <LL_ADC_IsEnabled>
 80007c2:	4604      	mov	r4, r0
 80007c4:	4864      	ldr	r0, [pc, #400]	; (8000958 <HAL_ADC_Init+0x298>)
 80007c6:	f7ff ff2d 	bl	8000624 <LL_ADC_IsEnabled>
 80007ca:	4603      	mov	r3, r0
 80007cc:	431c      	orrs	r4, r3
 80007ce:	4863      	ldr	r0, [pc, #396]	; (800095c <HAL_ADC_Init+0x29c>)
 80007d0:	f7ff ff28 	bl	8000624 <LL_ADC_IsEnabled>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4323      	orrs	r3, r4
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d105      	bne.n	80007e8 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4619      	mov	r1, r3
 80007e2:	485f      	ldr	r0, [pc, #380]	; (8000960 <HAL_ADC_Init+0x2a0>)
 80007e4:	f7ff fd82 	bl	80002ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7e5b      	ldrb	r3, [r3, #25]
 80007ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80007f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80007fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000806:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000808:	4313      	orrs	r3, r2
 800080a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d106      	bne.n	8000824 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800081a:	3b01      	subs	r3, #1
 800081c:	045b      	lsls	r3, r3, #17
 800081e:	69ba      	ldr	r2, [r7, #24]
 8000820:	4313      	orrs	r3, r2
 8000822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000828:	2b00      	cmp	r3, #0
 800082a:	d009      	beq.n	8000840 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000830:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	68da      	ldr	r2, [r3, #12]
 8000846:	4b47      	ldr	r3, [pc, #284]	; (8000964 <HAL_ADC_Init+0x2a4>)
 8000848:	4013      	ands	r3, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	69b9      	ldr	r1, [r7, #24]
 8000850:	430b      	orrs	r3, r1
 8000852:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff0a 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 800085e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff17 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 800086a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d13d      	bne.n	80008ee <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d13a      	bne.n	80008ee <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800087c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000884:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000886:	4313      	orrs	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000894:	f023 0302 	bic.w	r3, r3, #2
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	69b9      	ldr	r1, [r7, #24]
 800089e:	430b      	orrs	r3, r1
 80008a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d118      	bne.n	80008de <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	691b      	ldr	r3, [r3, #16]
 80008b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008b6:	f023 0304 	bic.w	r3, r3, #4
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008c2:	4311      	orrs	r1, r2
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80008c8:	4311      	orrs	r1, r2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80008ce:	430a      	orrs	r2, r1
 80008d0:	431a      	orrs	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f042 0201 	orr.w	r2, r2, #1
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	e007      	b.n	80008ee <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	691a      	ldr	r2, [r3, #16]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f022 0201 	bic.w	r2, r2, #1
 80008ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10c      	bne.n	8000910 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f023 010f 	bic.w	r1, r3, #15
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	1e5a      	subs	r2, r3, #1
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	430a      	orrs	r2, r1
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
 800090e:	e007      	b.n	8000920 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 020f 	bic.w	r2, r2, #15
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000924:	f023 0303 	bic.w	r3, r3, #3
 8000928:	f043 0201 	orr.w	r2, r3, #1
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	655a      	str	r2, [r3, #84]	; 0x54
 8000930:	e007      	b.n	8000942 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000936:	f043 0210 	orr.w	r2, r3, #16
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000942:	7ffb      	ldrb	r3, [r7, #31]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3724      	adds	r7, #36	; 0x24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	20000008 	.word	0x20000008
 8000950:	053e2d63 	.word	0x053e2d63
 8000954:	50040000 	.word	0x50040000
 8000958:	50040100 	.word	0x50040100
 800095c:	50040200 	.word	0x50040200
 8000960:	50040300 	.word	0x50040300
 8000964:	fff0c007 	.word	0xfff0c007

08000968 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000970:	4893      	ldr	r0, [pc, #588]	; (8000bc0 <HAL_ADC_Start_IT+0x258>)
 8000972:	f7ff fdd9 	bl	8000528 <LL_ADC_GetMultimode>
 8000976:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe78 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	f040 8112 	bne.w	8000bae <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000990:	2b01      	cmp	r3, #1
 8000992:	d101      	bne.n	8000998 <HAL_ADC_Start_IT+0x30>
 8000994:	2302      	movs	r3, #2
 8000996:	e10f      	b.n	8000bb8 <HAL_ADC_Start_IT+0x250>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2201      	movs	r2, #1
 800099c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 feb3 	bl	800170c <ADC_Enable>
 80009a6:	4603      	mov	r3, r0
 80009a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009aa:	7dfb      	ldrb	r3, [r7, #23]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f040 80f9 	bne.w	8000ba4 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009ba:	f023 0301 	bic.w	r3, r3, #1
 80009be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a7e      	ldr	r2, [pc, #504]	; (8000bc4 <HAL_ADC_Start_IT+0x25c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d002      	beq.n	80009d6 <HAL_ADC_Start_IT+0x6e>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	e000      	b.n	80009d8 <HAL_ADC_Start_IT+0x70>
 80009d6:	4b7c      	ldr	r3, [pc, #496]	; (8000bc8 <HAL_ADC_Start_IT+0x260>)
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	4293      	cmp	r3, r2
 80009de:	d002      	beq.n	80009e6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d105      	bne.n	80009f2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a02:	f023 0206 	bic.w	r2, r3, #6
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	659a      	str	r2, [r3, #88]	; 0x58
 8000a0a:	e002      	b.n	8000a12 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	221c      	movs	r2, #28
 8000a18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685a      	ldr	r2, [r3, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 021c 	bic.w	r2, r2, #28
 8000a30:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	2b08      	cmp	r3, #8
 8000a38:	d108      	bne.n	8000a4c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f042 0208 	orr.w	r2, r2, #8
 8000a48:	605a      	str	r2, [r3, #4]
          break;
 8000a4a:	e008      	b.n	8000a5e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f042 0204 	orr.w	r2, r2, #4
 8000a5a:	605a      	str	r2, [r3, #4]
          break;
 8000a5c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d107      	bne.n	8000a76 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f042 0210 	orr.w	r2, r2, #16
 8000a74:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <HAL_ADC_Start_IT+0x25c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d002      	beq.n	8000a86 <HAL_ADC_Start_IT+0x11e>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	e000      	b.n	8000a88 <HAL_ADC_Start_IT+0x120>
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <HAL_ADC_Start_IT+0x260>)
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d008      	beq.n	8000aa2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d005      	beq.n	8000aa2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	d002      	beq.n	8000aa2 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	d13b      	bne.n	8000b1a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d02d      	beq.n	8000b0c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d110      	bne.n	8000aea <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0220 	bic.w	r2, r2, #32
 8000ad6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ae6:	605a      	str	r2, [r3, #4]
              break;
 8000ae8:	e011      	b.n	8000b0e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000af8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	685a      	ldr	r2, [r3, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f042 0220 	orr.w	r2, r2, #32
 8000b08:	605a      	str	r2, [r3, #4]
              break;
 8000b0a:	e000      	b.n	8000b0e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8000b0c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd99 	bl	800064a <LL_ADC_REG_StartConversion>
 8000b18:	e04d      	b.n	8000bb6 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <HAL_ADC_Start_IT+0x25c>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d002      	beq.n	8000b36 <HAL_ADC_Start_IT+0x1ce>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	e000      	b.n	8000b38 <HAL_ADC_Start_IT+0x1d0>
 8000b36:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_ADC_Start_IT+0x260>)
 8000b38:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d036      	beq.n	8000bb4 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d110      	bne.n	8000b80 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0220 	bic.w	r2, r2, #32
 8000b6c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b7c:	605a      	str	r2, [r3, #4]
              break;
 8000b7e:	e01a      	b.n	8000bb6 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b8e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0220 	orr.w	r2, r2, #32
 8000b9e:	605a      	str	r2, [r3, #4]
              break;
 8000ba0:	bf00      	nop
 8000ba2:	e008      	b.n	8000bb6 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000bac:	e003      	b.n	8000bb6 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	75fb      	strb	r3, [r7, #23]
 8000bb2:	e000      	b.n	8000bb6 <HAL_ADC_Start_IT+0x24e>
        }
 8000bb4:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	50040300 	.word	0x50040300
 8000bc4:	50040100 	.word	0x50040100
 8000bc8:	50040000 	.word	0x50040000

08000bcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000c04:	4882      	ldr	r0, [pc, #520]	; (8000e10 <HAL_ADC_IRQHandler+0x228>)
 8000c06:	f7ff fc8f 	bl	8000528 <LL_ADC_GetMultimode>
 8000c0a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d017      	beq.n	8000c46 <HAL_ADC_IRQHandler+0x5e>
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d012      	beq.n	8000c46 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d105      	bne.n	8000c38 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c30:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fe0f 	bl	800185c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2202      	movs	r2, #2
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d004      	beq.n	8000c5a <HAL_ADC_IRQHandler+0x72>
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10a      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 8083 	beq.w	8000d6c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d07d      	beq.n	8000d6c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d105      	bne.n	8000c88 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fbaf 	bl	80003f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d062      	beq.n	8000d5e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a5d      	ldr	r2, [pc, #372]	; (8000e14 <HAL_ADC_IRQHandler+0x22c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d002      	beq.n	8000ca8 <HAL_ADC_IRQHandler+0xc0>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_IRQHandler+0xc2>
 8000ca8:	4b5b      	ldr	r3, [pc, #364]	; (8000e18 <HAL_ADC_IRQHandler+0x230>)
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d008      	beq.n	8000cc4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d005      	beq.n	8000cc4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d002      	beq.n	8000cc4 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b09      	cmp	r3, #9
 8000cc2:	d104      	bne.n	8000cce <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	623b      	str	r3, [r7, #32]
 8000ccc:	e00c      	b.n	8000ce8 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <HAL_ADC_IRQHandler+0x22c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d002      	beq.n	8000cde <HAL_ADC_IRQHandler+0xf6>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	e000      	b.n	8000ce0 <HAL_ADC_IRQHandler+0xf8>
 8000cde:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <HAL_ADC_IRQHandler+0x230>)
 8000ce0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d135      	bne.n	8000d5e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d12e      	bne.n	8000d5e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fcb4 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11a      	bne.n	8000d46 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 020c 	bic.w	r2, r2, #12
 8000d1e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d112      	bne.n	8000d5e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3c:	f043 0201 	orr.w	r2, r3, #1
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	655a      	str	r2, [r3, #84]	; 0x54
 8000d44:	e00b      	b.n	8000d5e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d4a:	f043 0210 	orr.w	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f001 fefe 	bl	8002b60 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	220c      	movs	r2, #12
 8000d6a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <HAL_ADC_IRQHandler+0x198>
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d10b      	bne.n	8000d98 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 809f 	beq.w	8000eca <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 8099 	beq.w	8000eca <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d105      	bne.n	8000db0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000da8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb57 	bl	8000468 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000dba:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fb15 	bl	80003f0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000dc6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <HAL_ADC_IRQHandler+0x22c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d002      	beq.n	8000dd8 <HAL_ADC_IRQHandler+0x1f0>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	e000      	b.n	8000dda <HAL_ADC_IRQHandler+0x1f2>
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_ADC_IRQHandler+0x230>)
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6812      	ldr	r2, [r2, #0]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d008      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d005      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2b06      	cmp	r3, #6
 8000dec:	d002      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b07      	cmp	r3, #7
 8000df2:	d104      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	623b      	str	r3, [r7, #32]
 8000dfc:	e013      	b.n	8000e26 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_ADC_IRQHandler+0x22c>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d009      	beq.n	8000e1c <HAL_ADC_IRQHandler+0x234>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	e007      	b.n	8000e1e <HAL_ADC_IRQHandler+0x236>
 8000e0e:	bf00      	nop
 8000e10:	50040300 	.word	0x50040300
 8000e14:	50040100 	.word	0x50040100
 8000e18:	50040000 	.word	0x50040000
 8000e1c:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <HAL_ADC_IRQHandler+0x42c>)
 8000e1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10c      	bne.n	8000e46 <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d142      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d03f      	beq.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d13a      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e50:	2b40      	cmp	r3, #64	; 0x40
 8000e52:	d133      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d12e      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fc18 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11a      	bne.n	8000ea4 <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000e7c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d112      	bne.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54
 8000ea2:	e00b      	b.n	8000ebc <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ea8:	f043 0210 	orr.w	r2, r3, #16
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fca5 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2260      	movs	r2, #96	; 0x60
 8000ec8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d011      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0x310>
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f896 	bl	800101c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <HAL_ADC_IRQHandler+0x340>
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00d      	beq.n	8000f28 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fc8b 	bl	8001834 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d012      	beq.n	8000f58 <HAL_ADC_IRQHandler+0x370>
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00d      	beq.n	8000f58 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fc7d 	bl	8001848 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0310 	and.w	r3, r3, #16
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d036      	beq.n	8000fd0 <HAL_ADC_IRQHandler+0x3e8>
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d031      	beq.n	8000fd0 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8000f74:	2301      	movs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
 8000f78:	e014      	b.n	8000fa4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d008      	beq.n	8000f92 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8000f80:	4825      	ldr	r0, [pc, #148]	; (8001018 <HAL_ADC_IRQHandler+0x430>)
 8000f82:	f7ff fadf 	bl	8000544 <LL_ADC_GetMultiDMATransfer>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f90:	e008      	b.n	8000fa4 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	f043 0202 	orr.w	r2, r3, #2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f834 	bl	8001030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2210      	movs	r2, #16
 8000fce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d018      	beq.n	800100c <HAL_ADC_IRQHandler+0x424>
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	f043 0208 	orr.w	r2, r3, #8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fc0a 	bl	8001820 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800100c:	bf00      	nop
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	50040000 	.word	0x50040000
 8001018:	50040300 	.word	0x50040300

0800101c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0a6      	sub	sp, #152	; 0x98
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800105e:	2b01      	cmp	r3, #1
 8001060:	d101      	bne.n	8001066 <HAL_ADC_ConfigChannel+0x22>
 8001062:	2302      	movs	r3, #2
 8001064:	e348      	b.n	80016f8 <HAL_ADC_ConfigChannel+0x6b4>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fafd 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 8329 	bne.w	80016d2 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d824      	bhi.n	80010d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	3b02      	subs	r3, #2
 800108e:	2b03      	cmp	r3, #3
 8001090:	d81b      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x86>
 8001092:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <HAL_ADC_ConfigChannel+0x54>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	080010a9 	.word	0x080010a9
 800109c:	080010b1 	.word	0x080010b1
 80010a0:	080010b9 	.word	0x080010b9
 80010a4:	080010c1 	.word	0x080010c1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	220c      	movs	r2, #12
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	e011      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	2212      	movs	r2, #18
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	e00d      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2218      	movs	r2, #24
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	e009      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	e004      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2206      	movs	r2, #6
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	e000      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80010d2:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	f7ff f998 	bl	8000416 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fac1 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 80010f0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff facd 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 80010fe:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001102:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001106:	2b00      	cmp	r3, #0
 8001108:	f040 8148 	bne.w	800139c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800110c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001110:	2b00      	cmp	r3, #0
 8001112:	f040 8143 	bne.w	800139c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff f9b3 	bl	800048e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b04      	cmp	r3, #4
 8001148:	d00a      	beq.n	8001160 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	6919      	ldr	r1, [r3, #16]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800115a:	f7ff f8fb 	bl	8000354 <LL_ADC_SetOffset>
 800115e:	e11d      	b.n	800139c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f916 	bl	8000398 <LL_ADC_GetOffsetChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10a      	bne.n	800118c <HAL_ADC_ConfigChannel+0x148>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f90b 	bl	8000398 <LL_ADC_GetOffsetChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	0e9b      	lsrs	r3, r3, #26
 8001186:	f003 021f 	and.w	r2, r3, #31
 800118a:	e012      	b.n	80011b2 <HAL_ADC_ConfigChannel+0x16e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f900 	bl	8000398 <LL_ADC_GetOffsetChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011a2:	fa93 f3a3 	rbit	r3, r3
 80011a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_ADC_ConfigChannel+0x186>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0e9b      	lsrs	r3, r3, #26
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	e00a      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x19c>
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80011d2:	fa93 f3a3 	rbit	r3, r3
 80011d6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80011d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011da:	fab3 f383 	clz	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d106      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f8e7 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f8cd 	bl	8000398 <LL_ADC_GetOffsetChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <HAL_ADC_ConfigChannel+0x1da>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f8c2 	bl	8000398 <LL_ADC_GetOffsetChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	0e9b      	lsrs	r3, r3, #26
 8001218:	f003 021f 	and.w	r2, r3, #31
 800121c:	e010      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1fc>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f8b7 	bl	8000398 <LL_ADC_GetOffsetChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001238:	fab3 f383 	clz	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x214>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	0e9b      	lsrs	r3, r3, #26
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	e00a      	b.n	800126e <HAL_ADC_ConfigChannel+0x22a>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001260:	fa93 f3a3 	rbit	r3, r3
 8001264:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	429a      	cmp	r2, r3
 8001270:	d106      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8a0 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2102      	movs	r1, #2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f886 	bl	8000398 <LL_ADC_GetOffsetChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10a      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x268>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2102      	movs	r1, #2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f87b 	bl	8000398 <LL_ADC_GetOffsetChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	0e9b      	lsrs	r3, r3, #26
 80012a6:	f003 021f 	and.w	r2, r3, #31
 80012aa:	e010      	b.n	80012ce <HAL_ADC_ConfigChannel+0x28a>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2102      	movs	r1, #2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f870 	bl	8000398 <LL_ADC_GetOffsetChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80012c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c6:	fab3 f383 	clz	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_ADC_ConfigChannel+0x2a2>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	0e9b      	lsrs	r3, r3, #26
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	e00a      	b.n	80012fc <HAL_ADC_ConfigChannel+0x2b8>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ee:	fa93 f3a3 	rbit	r3, r3
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80012f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d106      	bne.n	800130e <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f859 	bl	80003c0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2103      	movs	r1, #3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f83f 	bl	8000398 <LL_ADC_GetOffsetChannel>
 800131a:	4603      	mov	r3, r0
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10a      	bne.n	800133a <HAL_ADC_ConfigChannel+0x2f6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2103      	movs	r1, #3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f834 	bl	8000398 <LL_ADC_GetOffsetChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	0e9b      	lsrs	r3, r3, #26
 8001334:	f003 021f 	and.w	r2, r3, #31
 8001338:	e010      	b.n	800135c <HAL_ADC_ConfigChannel+0x318>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2103      	movs	r1, #3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f829 	bl	8000398 <LL_ADC_GetOffsetChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001354:	fab3 f383 	clz	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x330>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0e9b      	lsrs	r3, r3, #26
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	e00a      	b.n	800138a <HAL_ADC_ConfigChannel+0x346>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001384:	fab3 f383 	clz	r3, r3
 8001388:	b2db      	uxtb	r3, r3
 800138a:	429a      	cmp	r2, r3
 800138c:	d106      	bne.n	800139c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2200      	movs	r2, #0
 8001394:	2103      	movs	r1, #3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f812 	bl	80003c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f93f 	bl	8000624 <LL_ADC_IsEnabled>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 810c 	bne.w	80015c6 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f7ff f890 	bl	80004e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4aad      	ldr	r2, [pc, #692]	; (800167c <HAL_ADC_ConfigChannel+0x638>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f040 80fd 	bne.w	80015c6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10b      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x3b0>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	0e9b      	lsrs	r3, r3, #26
 80013e2:	3301      	adds	r3, #1
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2b09      	cmp	r3, #9
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	e012      	b.n	800141a <HAL_ADC_ConfigChannel+0x3d6>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3301      	adds	r3, #1
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	2b09      	cmp	r3, #9
 8001412:	bf94      	ite	ls
 8001414:	2301      	movls	r3, #1
 8001416:	2300      	movhi	r3, #0
 8001418:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800141a:	2b00      	cmp	r3, #0
 800141c:	d064      	beq.n	80014e8 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001426:	2b00      	cmp	r3, #0
 8001428:	d107      	bne.n	800143a <HAL_ADC_ConfigChannel+0x3f6>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	0e9b      	lsrs	r3, r3, #26
 8001430:	3301      	adds	r3, #1
 8001432:	069b      	lsls	r3, r3, #26
 8001434:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001438:	e00e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x414>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	069b      	lsls	r3, r3, #26
 8001454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x434>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	0e9b      	lsrs	r3, r3, #26
 800146a:	3301      	adds	r3, #1
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	e010      	b.n	800149a <HAL_ADC_ConfigChannel+0x456>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001480:	fa93 f3a3 	rbit	r3, r3
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	ea42 0103 	orr.w	r1, r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10a      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x47c>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0e9b      	lsrs	r3, r3, #26
 80014b0:	3301      	adds	r3, #1
 80014b2:	f003 021f 	and.w	r2, r3, #31
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	051b      	lsls	r3, r3, #20
 80014be:	e011      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x4a0>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	fab3 f383 	clz	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014e4:	430b      	orrs	r3, r1
 80014e6:	e069      	b.n	80015bc <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d107      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x4c0>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e9b      	lsrs	r3, r3, #26
 80014fa:	3301      	adds	r3, #1
 80014fc:	069b      	lsls	r3, r3, #26
 80014fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001502:	e00e      	b.n	8001522 <HAL_ADC_ConfigChannel+0x4de>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	fa93 f3a3 	rbit	r3, r3
 8001510:	61fb      	str	r3, [r7, #28]
  return result;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fab3 f383 	clz	r3, r3
 8001518:	b2db      	uxtb	r3, r3
 800151a:	3301      	adds	r3, #1
 800151c:	069b      	lsls	r3, r3, #26
 800151e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x4fe>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0e9b      	lsrs	r3, r3, #26
 8001534:	3301      	adds	r3, #1
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	e010      	b.n	8001564 <HAL_ADC_ConfigChannel+0x520>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	617b      	str	r3, [r7, #20]
  return result;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3301      	adds	r3, #1
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	ea42 0103 	orr.w	r1, r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10d      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x54c>
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0e9b      	lsrs	r3, r3, #26
 800157a:	3301      	adds	r3, #1
 800157c:	f003 021f 	and.w	r2, r3, #31
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	3b1e      	subs	r3, #30
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158e:	e014      	b.n	80015ba <HAL_ADC_ConfigChannel+0x576>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	60fb      	str	r3, [r7, #12]
  return result;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	f003 021f 	and.w	r2, r3, #31
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	3b1e      	subs	r3, #30
 80015b4:	051b      	lsls	r3, r3, #20
 80015b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015ba:	430b      	orrs	r3, r1
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	6892      	ldr	r2, [r2, #8]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7fe ff64 	bl	800048e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_ADC_ConfigChannel+0x63c>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 808c 	beq.w	80016ec <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015d4:	482b      	ldr	r0, [pc, #172]	; (8001684 <HAL_ADC_ConfigChannel+0x640>)
 80015d6:	f7fe feaf 	bl	8000338 <LL_ADC_GetCommonPathInternalCh>
 80015da:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <HAL_ADC_ConfigChannel+0x644>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d12b      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x5fc>
 80015e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80015ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d125      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a24      	ldr	r2, [pc, #144]	; (800168c <HAL_ADC_ConfigChannel+0x648>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d004      	beq.n	8001608 <HAL_ADC_ConfigChannel+0x5c4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a23      	ldr	r2, [pc, #140]	; (8001690 <HAL_ADC_ConfigChannel+0x64c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d16e      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001610:	4619      	mov	r1, r3
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <HAL_ADC_ConfigChannel+0x640>)
 8001614:	f7fe fe7d 	bl	8000312 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_ADC_ConfigChannel+0x650>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <HAL_ADC_ConfigChannel+0x654>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	099a      	lsrs	r2, r3, #6
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800163e:	e052      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_ADC_ConfigChannel+0x658>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d12a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x65c>
 800164a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800164e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d124      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_ADC_ConfigChannel+0x648>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d004      	beq.n	800166a <HAL_ADC_ConfigChannel+0x626>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_ADC_ConfigChannel+0x64c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d13f      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800166a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	4619      	mov	r1, r3
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <HAL_ADC_ConfigChannel+0x640>)
 8001676:	f7fe fe4c 	bl	8000312 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800167a:	e036      	b.n	80016ea <HAL_ADC_ConfigChannel+0x6a6>
 800167c:	407f0000 	.word	0x407f0000
 8001680:	80080000 	.word	0x80080000
 8001684:	50040300 	.word	0x50040300
 8001688:	c7520000 	.word	0xc7520000
 800168c:	50040000 	.word	0x50040000
 8001690:	50040200 	.word	0x50040200
 8001694:	20000008 	.word	0x20000008
 8001698:	053e2d63 	.word	0x053e2d63
 800169c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <HAL_ADC_ConfigChannel+0x6bc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d120      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d11a      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_ADC_ConfigChannel+0x6c0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d115      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016c8:	4619      	mov	r1, r3
 80016ca:	480f      	ldr	r0, [pc, #60]	; (8001708 <HAL_ADC_ConfigChannel+0x6c4>)
 80016cc:	f7fe fe21 	bl	8000312 <LL_ADC_SetCommonPathInternalCh>
 80016d0:	e00c      	b.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0220 	orr.w	r2, r3, #32
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016e4:	e002      	b.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016e6:	bf00      	nop
 80016e8:	e000      	b.n	80016ec <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80016f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3798      	adds	r7, #152	; 0x98
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	80000001 	.word	0x80000001
 8001704:	50040000 	.word	0x50040000
 8001708:	50040300 	.word	0x50040300

0800170c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff83 	bl	8000624 <LL_ADC_IsEnabled>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d146      	bne.n	80017b2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	4b24      	ldr	r3, [pc, #144]	; (80017bc <ADC_Enable+0xb0>)
 800172c:	4013      	ands	r3, r2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00d      	beq.n	800174e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e032      	b.n	80017b4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff52 	bl	80005fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001758:	f7fe fd9a 	bl	8000290 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175e:	e021      	b.n	80017a4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7fe ff5d 	bl	8000624 <LL_ADC_IsEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d104      	bne.n	800177a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff41 	bl	80005fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800177a:	f7fe fd89 	bl	8000290 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d90d      	bls.n	80017a4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178c:	f043 0210 	orr.w	r2, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e007      	b.n	80017b4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d1d6      	bne.n	8001760 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	8000003f 	.word	0x8000003f

080017c0 <LL_ADC_IsEnabled>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <LL_ADC_IsEnabled+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_ADC_IsEnabled+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d101      	bne.n	80017fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b09f      	sub	sp, #124	; 0x7c
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800188a:	2302      	movs	r3, #2
 800188c:	e08f      	b.n	80019ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d102      	bne.n	80018a6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	e001      	b.n	80018aa <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10b      	bne.n	80018c8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f043 0220 	orr.w	r2, r3, #32
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e072      	b.n	80019ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff8b 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 80018d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff85 	bl	80017e6 <LL_ADC_REG_IsConversionOngoing>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d154      	bne.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80018e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d151      	bne.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80018e8:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80018ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d02c      	beq.n	800194e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80018f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001906:	035b      	lsls	r3, r3, #13
 8001908:	430b      	orrs	r3, r1
 800190a:	431a      	orrs	r2, r3
 800190c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800190e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001910:	4829      	ldr	r0, [pc, #164]	; (80019b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001912:	f7ff ff55 	bl	80017c0 <LL_ADC_IsEnabled>
 8001916:	4604      	mov	r4, r0
 8001918:	4828      	ldr	r0, [pc, #160]	; (80019bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800191a:	f7ff ff51 	bl	80017c0 <LL_ADC_IsEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	431c      	orrs	r4, r3
 8001922:	4828      	ldr	r0, [pc, #160]	; (80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001924:	f7ff ff4c 	bl	80017c0 <LL_ADC_IsEnabled>
 8001928:	4603      	mov	r3, r0
 800192a:	4323      	orrs	r3, r4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d137      	bne.n	80019a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6811      	ldr	r1, [r2, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6892      	ldr	r2, [r2, #8]
 8001944:	430a      	orrs	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800194a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800194c:	e028      	b.n	80019a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800194e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001958:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800195a:	4817      	ldr	r0, [pc, #92]	; (80019b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800195c:	f7ff ff30 	bl	80017c0 <LL_ADC_IsEnabled>
 8001960:	4604      	mov	r4, r0
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001964:	f7ff ff2c 	bl	80017c0 <LL_ADC_IsEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	431c      	orrs	r4, r3
 800196c:	4815      	ldr	r0, [pc, #84]	; (80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800196e:	f7ff ff27 	bl	80017c0 <LL_ADC_IsEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	4323      	orrs	r3, r4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d112      	bne.n	80019a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800197a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001982:	f023 030f 	bic.w	r3, r3, #15
 8001986:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001988:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800198a:	e009      	b.n	80019a0 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800199e:	e000      	b.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80019a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80019aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	377c      	adds	r7, #124	; 0x7c
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	50040000 	.word	0x50040000
 80019bc:	50040100 	.word	0x50040100
 80019c0:	50040300 	.word	0x50040300
 80019c4:	50040200 	.word	0x50040200

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfa:	e17f      	b.n	8001efc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8171 	beq.w	8001ef6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x38>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b12      	cmp	r3, #18
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_GPIO_Init+0xd4>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb4:	2b11      	cmp	r3, #17
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d130      	bne.n	8001d22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 0201 	and.w	r2, r3, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d118      	bne.n	8001d60 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	08db      	lsrs	r3, r3, #3
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ac 	beq.w	8001ef6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b5e      	ldr	r3, [pc, #376]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da2:	4a5d      	ldr	r2, [pc, #372]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6613      	str	r3, [r2, #96]	; 0x60
 8001daa:	4b5b      	ldr	r3, [pc, #364]	; (8001f18 <HAL_GPIO_Init+0x32c>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001db6:	4a59      	ldr	r2, [pc, #356]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x242>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_GPIO_Init+0x334>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x23e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	; (8001f24 <HAL_GPIO_Init+0x338>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x23a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	; (8001f28 <HAL_GPIO_Init+0x33c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x236>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	; (8001f2c <HAL_GPIO_Init+0x340>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x232>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <HAL_GPIO_Init+0x344>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x22e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	; (8001f34 <HAL_GPIO_Init+0x348>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x22a>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x244>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e40:	4936      	ldr	r1, [pc, #216]	; (8001f1c <HAL_GPIO_Init+0x330>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	4a11      	ldr	r2, [pc, #68]	; (8001f38 <HAL_GPIO_Init+0x34c>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f47f ae78 	bne.w	8001bfc <HAL_GPIO_Init+0x10>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48000800 	.word	0x48000800
 8001f28:	48000c00 	.word	0x48000c00
 8001f2c:	48001000 	.word	0x48001000
 8001f30:	48001400 	.word	0x48001400
 8001f34:	48001800 	.word	0x48001800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f4c:	787b      	ldrb	r3, [r7, #1]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8c:	887a      	ldrh	r2, [r7, #2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40007000 	.word	0x40007000

08001fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fca:	d130      	bne.n	800202e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd8:	d038      	beq.n	800204c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2232      	movs	r2, #50	; 0x32
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002000:	e002      	b.n	8002008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3b01      	subs	r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	d102      	bne.n	800201c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1f2      	bne.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002028:	d110      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e00f      	b.n	800204e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203a:	d007      	beq.n	800204c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002044:	4a05      	ldr	r2, [pc, #20]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40007000 	.word	0x40007000
 8002060:	20000008 	.word	0x20000008
 8002064:	431bde83 	.word	0x431bde83

08002068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e39d      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4ba4      	ldr	r3, [pc, #656]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4ba1      	ldr	r3, [pc, #644]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80e1 	beq.w	800225e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4a>
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b0c      	cmp	r3, #12
 80020a6:	f040 8088 	bne.w	80021ba <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	f040 8084 	bne.w	80021ba <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020b2:	4b96      	ldr	r3, [pc, #600]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x62>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e375      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d004      	beq.n	80020e4 <HAL_RCC_OscConfig+0x7c>
 80020da:	4b8c      	ldr	r3, [pc, #560]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_OscConfig+0x88>
 80020e4:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d223      	bcs.n	800213c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fcd1 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e356      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002108:	4b80      	ldr	r3, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7f      	ldr	r2, [pc, #508]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800210e:	f043 0308 	orr.w	r3, r3, #8
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	497a      	ldr	r1, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002126:	4b79      	ldr	r3, [pc, #484]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	4975      	ldr	r1, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	604b      	str	r3, [r1, #4]
 800213a:	e022      	b.n	8002182 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800213c:	4b73      	ldr	r3, [pc, #460]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a72      	ldr	r2, [pc, #456]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b70      	ldr	r3, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	496d      	ldr	r1, [pc, #436]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215a:	4b6c      	ldr	r3, [pc, #432]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4968      	ldr	r1, [pc, #416]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fc94 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e319      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002182:	f000 fc03 	bl	800298c <HAL_RCC_GetSysClockFreq>
 8002186:	4601      	mov	r1, r0
 8002188:	4b60      	ldr	r3, [pc, #384]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_RCC_OscConfig+0x2a8>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	fa21 f303 	lsr.w	r3, r1, r3
 800219e:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x2b0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f826 	bl	80001f8 <HAL_InitTick>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d052      	beq.n	800225c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	e2fd      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d032      	beq.n	8002228 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c2:	4b52      	ldr	r3, [pc, #328]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ce:	f7fe f85f 	bl	8000290 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d6:	f7fe f85b 	bl	8000290 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e2e6      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e8:	4b48      	ldr	r3, [pc, #288]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a44      	ldr	r2, [pc, #272]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	493f      	ldr	r1, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	493a      	ldr	r1, [pc, #232]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
 8002226:	e01a      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a37      	ldr	r2, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002234:	f7fe f82c 	bl	8000290 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7fe f828 	bl	8000290 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e2b3      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x1d4>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d074      	beq.n	8002354 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x214>
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d10e      	bne.n	8002294 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d10b      	bne.n	8002294 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d064      	beq.n	8002352 <HAL_RCC_OscConfig+0x2ea>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d160      	bne.n	8002352 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e290      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x244>
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e01d      	b.n	80022e8 <HAL_RCC_OscConfig+0x280>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x268>
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0x280>
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_RCC_OscConfig+0x2a4>)
 80022e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fd ffce 	bl	8000290 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f6:	e011      	b.n	800231c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fd ffca 	bl	8000290 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d90a      	bls.n	800231c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e255      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	08003018 	.word	0x08003018
 8002314:	20000008 	.word	0x20000008
 8002318:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231c:	4bae      	ldr	r3, [pc, #696]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0e7      	beq.n	80022f8 <HAL_RCC_OscConfig+0x290>
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7fd ffb1 	bl	8000290 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002332:	f7fd ffad 	bl	8000290 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e238      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002344:	4ba4      	ldr	r3, [pc, #656]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x2ca>
 8002350:	e000      	b.n	8002354 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002352:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d060      	beq.n	8002422 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b04      	cmp	r3, #4
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x30a>
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b0c      	cmp	r3, #12
 800236a:	d119      	bne.n	80023a0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d116      	bne.n	80023a0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002372:	4b99      	ldr	r3, [pc, #612]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x322>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e215      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b93      	ldr	r3, [pc, #588]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	061b      	lsls	r3, r3, #24
 8002398:	498f      	ldr	r1, [pc, #572]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239e:	e040      	b.n	8002422 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d023      	beq.n	80023f0 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a8:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a8a      	ldr	r2, [pc, #552]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fd ff6c 	bl	8000290 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7fd ff68 	bl	8000290 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e1f3      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ce:	4b82      	ldr	r3, [pc, #520]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023da:	4b7f      	ldr	r3, [pc, #508]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	497b      	ldr	r1, [pc, #492]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
 80023ee:	e018      	b.n	8002422 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f0:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a78      	ldr	r2, [pc, #480]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80023f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fd ff48 	bl	8000290 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002404:	f7fd ff44 	bl	8000290 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1cf      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002416:	4b70      	ldr	r3, [pc, #448]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01c      	beq.n	8002470 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243c:	4a66      	ldr	r2, [pc, #408]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fd ff23 	bl	8000290 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fd ff1f 	bl	8000290 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1aa      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002460:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0ef      	beq.n	800244e <HAL_RCC_OscConfig+0x3e6>
 800246e:	e01b      	b.n	80024a8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fd ff06 	bl	8000290 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002488:	f7fd ff02 	bl	8000290 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e18d      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249a:	4b4f      	ldr	r3, [pc, #316]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800249c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ef      	bne.n	8002488 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a5 	beq.w	8002600 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b44      	ldr	r3, [pc, #272]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024de:	2301      	movs	r3, #1
 80024e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCC_OscConfig+0x574>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d118      	bne.n	8002520 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ee:	4b3b      	ldr	r3, [pc, #236]	; (80025dc <HAL_RCC_OscConfig+0x574>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3a      	ldr	r2, [pc, #232]	; (80025dc <HAL_RCC_OscConfig+0x574>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fa:	f7fd fec9 	bl	8000290 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002502:	f7fd fec5 	bl	8000290 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e150      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002514:	4b31      	ldr	r3, [pc, #196]	; (80025dc <HAL_RCC_OscConfig+0x574>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_RCC_OscConfig+0x4d2>
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002538:	e024      	b.n	8002584 <HAL_RCC_OscConfig+0x51c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d110      	bne.n	8002564 <HAL_RCC_OscConfig+0x4fc>
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002562:	e00f      	b.n	8002584 <HAL_RCC_OscConfig+0x51c>
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a1b      	ldr	r2, [pc, #108]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d016      	beq.n	80025ba <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fd fe80 	bl	8000290 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fd fe7c 	bl	8000290 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e105      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x570>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ed      	beq.n	8002594 <HAL_RCC_OscConfig+0x52c>
 80025b8:	e019      	b.n	80025ee <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fd fe69 	bl	8000290 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c0:	e00e      	b.n	80025e0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fd fe65 	bl	8000290 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d905      	bls.n	80025e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0ee      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1e9      	bne.n	80025c2 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ee:	7ffb      	ldrb	r3, [r7, #31]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f4:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	4a71      	ldr	r2, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80025fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80d5 	beq.w	80027b4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0c      	cmp	r3, #12
 800260e:	f000 808e 	beq.w	800272e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	2b02      	cmp	r3, #2
 8002618:	d15b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 8002620:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fd fe33 	bl	8000290 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262e:	f7fd fe2f 	bl	8000290 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0ba      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x75c>)
 8002652:	4013      	ands	r3, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800265c:	3a01      	subs	r2, #1
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002666:	0212      	lsls	r2, r2, #8
 8002668:	4311      	orrs	r1, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800266e:	0852      	lsrs	r2, r2, #1
 8002670:	3a01      	subs	r2, #1
 8002672:	0552      	lsls	r2, r2, #21
 8002674:	4311      	orrs	r1, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800267a:	0852      	lsrs	r2, r2, #1
 800267c:	3a01      	subs	r2, #1
 800267e:	0652      	lsls	r2, r2, #25
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002686:	0912      	lsrs	r2, r2, #4
 8002688:	0452      	lsls	r2, r2, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	494c      	ldr	r1, [pc, #304]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4a      	ldr	r2, [pc, #296]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 8002698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800269e:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	4a47      	ldr	r2, [pc, #284]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fd fdf1 	bl	8000290 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b2:	f7fd fded 	bl	8000290 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e078      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x64a>
 80026d0:	e070      	b.n	80027b4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a3a      	ldr	r2, [pc, #232]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ea:	4b35      	ldr	r3, [pc, #212]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a34      	ldr	r2, [pc, #208]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026f0:	f023 0303 	bic.w	r3, r3, #3
 80026f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026f6:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a31      	ldr	r2, [pc, #196]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 80026fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fd fdc3 	bl	8000290 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fd fdbf 	bl	8000290 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e04a      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x6a6>
 800272c:	e042      	b.n	80027b4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e03d      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x758>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0203 	and.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	429a      	cmp	r2, r3
 800274c:	d130      	bne.n	80027b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	3b01      	subs	r3, #1
 800275a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d127      	bne.n	80027b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	429a      	cmp	r2, r3
 800276e:	d11f      	bne.n	80027b0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800277a:	2a07      	cmp	r2, #7
 800277c:	bf14      	ite	ne
 800277e:	2201      	movne	r2, #1
 8002780:	2200      	moveq	r2, #0
 8002782:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d113      	bne.n	80027b0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	f99d808c 	.word	0xf99d808c

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0c8      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b66      	ldr	r3, [pc, #408]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4961      	ldr	r1, [pc, #388]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b0      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d04c      	beq.n	80028b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002820:	4b56      	ldr	r3, [pc, #344]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d121      	bne.n	8002870 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e09e      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d107      	bne.n	8002848 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d115      	bne.n	8002870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e092      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002850:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e086      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002860:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e07e      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 0203 	bic.w	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	493f      	ldr	r1, [pc, #252]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002882:	f7fd fd05 	bl	8000290 <HAL_GetTick>
 8002886:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288a:	f7fd fd01 	bl	8000290 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e066      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 020c 	and.w	r2, r3, #12
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d1eb      	bne.n	800288a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d008      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	492c      	ldr	r1, [pc, #176]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d210      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4924      	ldr	r1, [pc, #144]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1b0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e036      	b.n	800296e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4918      	ldr	r1, [pc, #96]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4910      	ldr	r1, [pc, #64]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800293e:	f000 f825 	bl	800298c <HAL_RCC_GetSysClockFreq>
 8002942:	4601      	mov	r1, r0
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_RCC_ClockConfig+0x1b4>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	5cd3      	ldrb	r3, [r2, r3]
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	fa21 f303 	lsr.w	r3, r1, r3
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fc48 	bl	80001f8 <HAL_InitTick>
 8002968:	4603      	mov	r3, r0
 800296a:	72fb      	strb	r3, [r7, #11]

  return status;
 800296c:	7afb      	ldrb	r3, [r7, #11]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
 8002980:	08003018 	.word	0x08003018
 8002984:	20000008 	.word	0x20000008
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x34>
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d121      	bne.n	80029fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11e      	bne.n	80029fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029c0:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029cc:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e005      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029e8:	4a2a      	ldr	r2, [pc, #168]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d102      	bne.n	8002a0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	e004      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d133      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0xa4>
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0xaa>
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a32:	617b      	str	r3, [r7, #20]
      break;
 8002a34:	e005      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a38:	617b      	str	r3, [r7, #20]
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	617b      	str	r3, [r7, #20]
      break;
 8002a40:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a42:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	fb02 f203 	mul.w	r2, r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0e5b      	lsrs	r3, r3, #25
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a82:	69bb      	ldr	r3, [r7, #24]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3724      	adds	r7, #36	; 0x24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40021000 	.word	0x40021000
 8002a94:	08003028 	.word	0x08003028
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aac:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ab8:	f7ff fa72 	bl	8001fa0 <HAL_PWREx_GetVoltageRange>
 8002abc:	6178      	str	r0, [r7, #20]
 8002abe:	e014      	b.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
 8002acc:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ad8:	f7ff fa62 	bl	8001fa0 <HAL_PWREx_GetVoltageRange>
 8002adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af0:	d10b      	bne.n	8002b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d919      	bls.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2ba0      	cmp	r3, #160	; 0xa0
 8002afc:	d902      	bls.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002afe:	2302      	movs	r3, #2
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	e013      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b04:	2301      	movs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	e010      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d902      	bls.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b10:	2303      	movs	r3, #3
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e00a      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d102      	bne.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e004      	b.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d101      	bne.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b28:	2301      	movs	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 0207 	bic.w	r2, r3, #7
 8002b34:	4909      	ldr	r1, [pc, #36]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d001      	beq.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	40022000 	.word	0x40022000

08002b60 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t value;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	value = HAL_ADC_GetValue(hadc1);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7fe f82f 	bl	8000bcc <HAL_ADC_GetValue>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x24>)
 8002b72:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(hadc1); // Re-Start ADC1 under Interrupt
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fd fef7 	bl	8000968 <HAL_ADC_Start_IT>
							 // this is necessary because we don'use
							 // the Continuous Conversion Mode
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000090 	.word	0x20000090

08002b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b8c:	f7fd fb1c 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b90:	f000 f812 	bl	8002bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b94:	f000 f8ce 	bl	8002d34 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002b98:	f000 f854 	bl	8002c44 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);  // start ADC in interrupt mode
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <main+0x2c>)
 8002b9e:	f7fd fee3 	bl	8000968 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ba8:	f7ff f9e0 	bl	8001f6c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002bac:	2064      	movs	r0, #100	; 0x64
 8002bae:	f7fd fb7b 	bl	80002a8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002bb2:	e7f6      	b.n	8002ba2 <main+0x1a>
 8002bb4:	2000002c 	.word	0x2000002c

08002bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b096      	sub	sp, #88	; 0x58
 8002bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	2244      	movs	r2, #68	; 0x44
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fa12 	bl	8002ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bcc:	463b      	mov	r3, r7
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002bda:	2310      	movs	r3, #16
 8002bdc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002bde:	2301      	movs	r3, #1
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002be6:	2360      	movs	r3, #96	; 0x60
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bee:	f107 0314 	add.w	r3, r7, #20
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fa38 	bl	8002068 <HAL_RCC_OscConfig>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8002bfe:	f000 f8c9 	bl	8002d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c02:	230f      	movs	r3, #15
 8002c04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c16:	463b      	mov	r3, r7
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fdd4 	bl	80027c8 <HAL_RCC_ClockConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002c26:	f000 f8b5 	bl	8002d94 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002c2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c2e:	f7ff f9c5 	bl	8001fbc <HAL_PWREx_ControlVoltageScaling>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002c38:	f000 f8ac 	bl	8002d94 <Error_Handler>
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3758      	adds	r7, #88	; 0x58
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c4a:	f107 031c 	add.w	r3, r7, #28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c56:	1d3b      	adds	r3, r7, #4
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
 8002c64:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002c66:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c68:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <MX_ADC1_Init+0xe8>)
 8002c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c88:	2204      	movs	r2, #4
 8002c8a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c92:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cc8:	4817      	ldr	r0, [pc, #92]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002cca:	f7fd fcf9 	bl	80006c0 <HAL_ADC_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002cd4:	f000 f85e 	bl	8002d94 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002cdc:	f107 031c 	add.w	r3, r7, #28
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4811      	ldr	r0, [pc, #68]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002ce4:	f7fe fdc4 	bl	8001870 <HAL_ADCEx_MultiModeConfigChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002cee:	f000 f851 	bl	8002d94 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <MX_ADC1_Init+0xec>)
 8002cf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cf6:	2306      	movs	r3, #6
 8002cf8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002cfe:	237f      	movs	r3, #127	; 0x7f
 8002d00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d02:	2304      	movs	r3, #4
 8002d04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	; (8002d28 <MX_ADC1_Init+0xe4>)
 8002d10:	f7fe f998 	bl	8001044 <HAL_ADC_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8002d1a:	f000 f83b 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000002c 	.word	0x2000002c
 8002d2c:	50040000 	.word	0x50040000
 8002d30:	14f00020 	.word	0x14f00020

08002d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_GPIO_Init+0x5c>)
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4c:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <MX_GPIO_Init+0x5c>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d54:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_GPIO_Init+0x5c>)
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2120      	movs	r1, #32
 8002d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d68:	f7ff f8e8 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d84:	f7fe ff32 	bl	8001bec <HAL_GPIO_Init>

}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_MspInit+0x44>)
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <HAL_MspInit+0x44>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6613      	str	r3, [r2, #96]	; 0x60
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_MspInit+0x44>)
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_MspInit+0x44>)
 8002dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_MspInit+0x44>)
 8002dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_ADC_MspInit+0x84>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12c      	bne.n	8002e68 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e0e:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_ADC_MspInit+0x88>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e42:	230b      	movs	r3, #11
 8002e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	f107 0314 	add.w	r3, r7, #20
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e54:	f7fe feca 	bl	8001bec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2012      	movs	r0, #18
 8002e5e:	f7fe fe8e 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002e62:	2012      	movs	r0, #18
 8002e64:	f7fe fea7 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	50040000 	.word	0x50040000
 8002e74:	40021000 	.word	0x40021000

08002e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f7fd f9ce 	bl	800026c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <ADC1_2_IRQHandler+0x10>)
 8002eda:	f7fd fe85 	bl	8000be8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000002c 	.word	0x2000002c

08002ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eec:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <SystemInit+0x64>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <SystemInit+0x64>)
 8002ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002efc:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <SystemInit+0x68>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <SystemInit+0x68>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <SystemInit+0x68>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <SystemInit+0x68>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a0f      	ldr	r2, [pc, #60]	; (8002f50 <SystemInit+0x68>)
 8002f14:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002f18:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <SystemInit+0x68>)
 8002f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f24:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <SystemInit+0x68>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <SystemInit+0x68>)
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <SystemInit+0x68>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SystemInit+0x64>)
 8002f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	e000ed00 	.word	0xe000ed00
 8002f50:	40021000 	.word	0x40021000

08002f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f5a:	e003      	b.n	8002f64 <LoopCopyDataInit>

08002f5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f62:	3104      	adds	r1, #4

08002f64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f64:	480b      	ldr	r0, [pc, #44]	; (8002f94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f6c:	d3f6      	bcc.n	8002f5c <CopyDataInit>
	ldr	r2, =_sbss
 8002f6e:	4a0b      	ldr	r2, [pc, #44]	; (8002f9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f70:	e002      	b.n	8002f78 <LoopFillZerobss>

08002f72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f74:	f842 3b04 	str.w	r3, [r2], #4

08002f78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <LoopForever+0x16>)
	cmp	r2, r3
 8002f7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f7c:	d3f9      	bcc.n	8002f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f7e:	f7ff ffb3 	bl	8002ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f82:	f000 f811 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f86:	f7ff fdff 	bl	8002b88 <main>

08002f8a <LoopForever>:

LoopForever:
    b LoopForever
 8002f8a:	e7fe      	b.n	8002f8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002f90:	08003060 	.word	0x08003060
	ldr	r0, =_sdata
 8002f94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002f9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002fa0:	20000094 	.word	0x20000094

08002fa4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fa4:	e7fe      	b.n	8002fa4 <ADC3_IRQHandler>
	...

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0d      	ldr	r6, [pc, #52]	; (8002fe0 <__libc_init_array+0x38>)
 8002fac:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fae:	1ba4      	subs	r4, r4, r6
 8002fb0:	10a4      	asrs	r4, r4, #2
 8002fb2:	2500      	movs	r5, #0
 8002fb4:	42a5      	cmp	r5, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	4e0b      	ldr	r6, [pc, #44]	; (8002fe8 <__libc_init_array+0x40>)
 8002fba:	4c0c      	ldr	r4, [pc, #48]	; (8002fec <__libc_init_array+0x44>)
 8002fbc:	f000 f820 	bl	8003000 <_init>
 8002fc0:	1ba4      	subs	r4, r4, r6
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	42a5      	cmp	r5, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fd0:	4798      	blx	r3
 8002fd2:	3501      	adds	r5, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fda:	4798      	blx	r3
 8002fdc:	3501      	adds	r5, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	08003058 	.word	0x08003058
 8002fe4:	08003058 	.word	0x08003058
 8002fe8:	08003058 	.word	0x08003058
 8002fec:	0800305c 	.word	0x0800305c

08002ff0 <memset>:
 8002ff0:	4402      	add	r2, r0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <memset+0xa>
 8002ff8:	4770      	bx	lr
 8002ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8002ffe:	e7f9      	b.n	8002ff4 <memset+0x4>

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	bf00      	nop
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
