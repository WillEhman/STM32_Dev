
blink_with_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c4  080040c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080040c4  080040c4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040c4  080040c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000070  0800413c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800413c  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf9b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a0a  00000000  00000000  0002c03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a30  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d79  00000000  00000000  0002edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e56  00000000  00000000  00056b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7511  00000000  00000000  0005f99f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00156eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000302c  00000000  00000000  00156f2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fc0 	.word	0x08003fc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003fc0 	.word	0x08003fc0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	2003      	movs	r0, #3
 800027c:	f001 fcc8 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000280:	2000      	movs	r0, #0
 8000282:	f000 f80d 	bl	80002a0 <HAL_InitTick>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800028c:	2301      	movs	r3, #1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	e001      	b.n	8000296 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000292:	f002 fde3 	bl	8002e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000296:	79fb      	ldrb	r3, [r7, #7]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <HAL_InitTick+0x68>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d022      	beq.n	80002fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <HAL_InitTick+0x6c>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <HAL_InitTick+0x68>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80002c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c8:	4618      	mov	r0, r3
 80002ca:	f001 fcd6 	bl	8001c7a <HAL_SYSTICK_Config>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d10f      	bne.n	80002f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b0f      	cmp	r3, #15
 80002d8:	d809      	bhi.n	80002ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002da:	2200      	movs	r2, #0
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	f04f 30ff 	mov.w	r0, #4294967295
 80002e2:	f001 fca0 	bl	8001c26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <HAL_InitTick+0x70>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	e007      	b.n	80002fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80002ee:	2301      	movs	r3, #1
 80002f0:	73fb      	strb	r3, [r7, #15]
 80002f2:	e004      	b.n	80002fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002f4:	2301      	movs	r3, #1
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	e001      	b.n	80002fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002fa:	2301      	movs	r3, #1
 80002fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000300:	4618      	mov	r0, r3
 8000302:	3710      	adds	r7, #16
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000004 	.word	0x20000004
 800030c:	20000008 	.word	0x20000008
 8000310:	20000000 	.word	0x20000000

08000314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <HAL_IncTick+0x1c>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <HAL_IncTick+0x20>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4413      	add	r3, r2
 8000322:	4a03      	ldr	r2, [pc, #12]	; (8000330 <HAL_IncTick+0x1c>)
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	20000098 	.word	0x20000098
 8000334:	20000004 	.word	0x20000004

08000338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  return uwTick;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <HAL_GetTick+0x14>)
 800033e:	681b      	ldr	r3, [r3, #0]
}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000098 	.word	0x20000098

08000350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000358:	f7ff ffee 	bl	8000338 <HAL_GetTick>
 800035c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000368:	d004      	beq.n	8000374 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <HAL_Delay+0x40>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	68fa      	ldr	r2, [r7, #12]
 8000370:	4413      	add	r3, r2
 8000372:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000374:	bf00      	nop
 8000376:	f7ff ffdf 	bl	8000338 <HAL_GetTick>
 800037a:	4602      	mov	r2, r0
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	429a      	cmp	r2, r3
 8000384:	d8f7      	bhi.n	8000376 <HAL_Delay+0x26>
  {
  }
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000004 	.word	0x20000004

08000394 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	431a      	orrs	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	609a      	str	r2, [r3, #8]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	689b      	ldr	r3, [r3, #8]
 80003c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	431a      	orrs	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	609a      	str	r2, [r3, #8]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003fc:	b490      	push	{r4, r7}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	3360      	adds	r3, #96	; 0x60
 800040e:	461a      	mov	r2, r3
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	4413      	add	r3, r2
 8000416:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000418:	6822      	ldr	r2, [r4, #0]
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <LL_ADC_SetOffset+0x40>)
 800041c:	4013      	ands	r3, r2
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	430a      	orrs	r2, r1
 8000428:	4313      	orrs	r3, r2
 800042a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800042e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bc90      	pop	{r4, r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	03fff000 	.word	0x03fff000

08000440 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3360      	adds	r3, #96	; 0x60
 800044e:	461a      	mov	r2, r3
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000458:	6823      	ldr	r3, [r4, #0]
 800045a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bc90      	pop	{r4, r7}
 8000466:	4770      	bx	lr

08000468 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000468:	b490      	push	{r4, r7}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3360      	adds	r3, #96	; 0x60
 8000478:	461a      	mov	r2, r3
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000482:	6823      	ldr	r3, [r4, #0]
 8000484:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4313      	orrs	r3, r2
 800048c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bc90      	pop	{r4, r7}
 8000496:	4770      	bx	lr

08000498 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004be:	b490      	push	{r4, r7}
 80004c0:	b084      	sub	sp, #16
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3330      	adds	r3, #48	; 0x30
 80004ce:	461a      	mov	r2, r3
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	f003 030c 	and.w	r3, r3, #12
 80004da:	4413      	add	r3, r2
 80004dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004de:	6822      	ldr	r2, [r4, #0]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	f003 031f 	and.w	r3, r3, #31
 80004e6:	211f      	movs	r1, #31
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	43db      	mvns	r3, r3
 80004ee:	401a      	ands	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	0e9b      	lsrs	r3, r3, #26
 80004f4:	f003 011f 	and.w	r1, r3, #31
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	f003 031f 	and.w	r3, r3, #31
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bc90      	pop	{r4, r7}
 800050e:	4770      	bx	lr

08000510 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000524:	2301      	movs	r3, #1
 8000526:	e000      	b.n	800052a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000536:	b490      	push	{r4, r7}
 8000538:	b084      	sub	sp, #16
 800053a:	af00      	add	r7, sp, #0
 800053c:	60f8      	str	r0, [r7, #12]
 800053e:	60b9      	str	r1, [r7, #8]
 8000540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3314      	adds	r3, #20
 8000546:	461a      	mov	r2, r3
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	0e5b      	lsrs	r3, r3, #25
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	4413      	add	r3, r2
 8000554:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000556:	6822      	ldr	r2, [r4, #0]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	0d1b      	lsrs	r3, r3, #20
 800055c:	f003 031f 	and.w	r3, r3, #31
 8000560:	2107      	movs	r1, #7
 8000562:	fa01 f303 	lsl.w	r3, r1, r3
 8000566:	43db      	mvns	r3, r3
 8000568:	401a      	ands	r2, r3
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	0d1b      	lsrs	r3, r3, #20
 800056e:	f003 031f 	and.w	r3, r3, #31
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	fa01 f303 	lsl.w	r3, r1, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bc90      	pop	{r4, r7}
 8000584:	4770      	bx	lr
	...

08000588 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005a0:	43db      	mvns	r3, r3
 80005a2:	401a      	ands	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f003 0318 	and.w	r3, r3, #24
 80005aa:	4908      	ldr	r1, [pc, #32]	; (80005cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80005ac:	40d9      	lsrs	r1, r3
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	400b      	ands	r3, r1
 80005b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80005b6:	431a      	orrs	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	0007ffff 	.word	0x0007ffff

080005d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	f003 031f 	and.w	r3, r3, #31
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000618:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	6093      	str	r3, [r2, #8]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800063c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000640:	d101      	bne.n	8000646 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000664:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000668:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000690:	d101      	bne.n	8000696 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80006b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006b8:	f043 0201 	orr.w	r2, r3, #1
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d101      	bne.n	80006e4 <LL_ADC_IsEnabled+0x18>
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <LL_ADC_IsEnabled+0x1a>
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000702:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000706:	f043 0204 	orr.w	r2, r3, #4
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800071a:	b480      	push	{r7}
 800071c:	b083      	sub	sp, #12
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	f003 0304 	and.w	r3, r3, #4
 800072a:	2b04      	cmp	r3, #4
 800072c:	d101      	bne.n	8000732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	2b08      	cmp	r3, #8
 8000752:	d101      	bne.n	8000758 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000754:	2301      	movs	r3, #1
 8000756:	e000      	b.n	800075a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000770:	2300      	movs	r3, #0
 8000772:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e134      	b.n	80009ec <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800078c:	2b00      	cmp	r3, #0
 800078e:	d109      	bne.n	80007a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f002 fb87 	bl	8002ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff3f 	bl	800062c <LL_ADC_IsDeepPowerDownEnabled>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d004      	beq.n	80007be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff25 	bl	8000608 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff5a 	bl	800067c <LL_ADC_IsInternalRegulatorEnabled>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d113      	bne.n	80007f6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff ff3e 	bl	8000654 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80007d8:	4b86      	ldr	r3, [pc, #536]	; (80009f4 <HAL_ADC_Init+0x28c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	099b      	lsrs	r3, r3, #6
 80007de:	4a86      	ldr	r2, [pc, #536]	; (80009f8 <HAL_ADC_Init+0x290>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	099b      	lsrs	r3, r3, #6
 80007e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007e8:	e002      	b.n	80007f0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d1f9      	bne.n	80007ea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ff3e 	bl	800067c <LL_ADC_IsInternalRegulatorEnabled>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10d      	bne.n	8000822 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800080a:	f043 0210 	orr.w	r2, r3, #16
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000816:	f043 0201 	orr.w	r2, r3, #1
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff77 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 800082c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	2b00      	cmp	r3, #0
 8000838:	f040 80cf 	bne.w	80009da <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 80cb 	bne.w	80009da <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000848:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800084c:	f043 0202 	orr.w	r2, r3, #2
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff37 	bl	80006cc <LL_ADC_IsEnabled>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d115      	bne.n	8000890 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000864:	4865      	ldr	r0, [pc, #404]	; (80009fc <HAL_ADC_Init+0x294>)
 8000866:	f7ff ff31 	bl	80006cc <LL_ADC_IsEnabled>
 800086a:	4604      	mov	r4, r0
 800086c:	4864      	ldr	r0, [pc, #400]	; (8000a00 <HAL_ADC_Init+0x298>)
 800086e:	f7ff ff2d 	bl	80006cc <LL_ADC_IsEnabled>
 8000872:	4603      	mov	r3, r0
 8000874:	431c      	orrs	r4, r3
 8000876:	4863      	ldr	r0, [pc, #396]	; (8000a04 <HAL_ADC_Init+0x29c>)
 8000878:	f7ff ff28 	bl	80006cc <LL_ADC_IsEnabled>
 800087c:	4603      	mov	r3, r0
 800087e:	4323      	orrs	r3, r4
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	485f      	ldr	r0, [pc, #380]	; (8000a08 <HAL_ADC_Init+0x2a0>)
 800088c:	f7ff fd82 	bl	8000394 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7e5b      	ldrb	r3, [r3, #25]
 8000894:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800089a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80008a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80008a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80008b0:	4313      	orrs	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d106      	bne.n	80008cc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	3b01      	subs	r3, #1
 80008c4:	045b      	lsls	r3, r3, #17
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d009      	beq.n	80008e8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	4b47      	ldr	r3, [pc, #284]	; (8000a0c <HAL_ADC_Init+0x2a4>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff0a 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 8000906:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff17 	bl	8000740 <LL_ADC_INJ_IsConversionOngoing>
 8000912:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d13d      	bne.n	8000996 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d13a      	bne.n	8000996 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000924:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800092c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800092e:	4313      	orrs	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800093c:	f023 0302 	bic.w	r3, r3, #2
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6812      	ldr	r2, [r2, #0]
 8000944:	69b9      	ldr	r1, [r7, #24]
 8000946:	430b      	orrs	r3, r1
 8000948:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000950:	2b01      	cmp	r3, #1
 8000952:	d118      	bne.n	8000986 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691b      	ldr	r3, [r3, #16]
 800095a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800095e:	f023 0304 	bic.w	r3, r3, #4
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800096a:	4311      	orrs	r1, r2
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000970:	4311      	orrs	r1, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000976:	430a      	orrs	r2, r1
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f042 0201 	orr.w	r2, r2, #1
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	e007      	b.n	8000996 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	691a      	ldr	r2, [r3, #16]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	691b      	ldr	r3, [r3, #16]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d10c      	bne.n	80009b8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f023 010f 	bic.w	r1, r3, #15
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	1e5a      	subs	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
 80009b6:	e007      	b.n	80009c8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f022 020f 	bic.w	r2, r2, #15
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009cc:	f023 0303 	bic.w	r3, r3, #3
 80009d0:	f043 0201 	orr.w	r2, r3, #1
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
 80009d8:	e007      	b.n	80009ea <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009de:	f043 0210 	orr.w	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3724      	adds	r7, #36	; 0x24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000008 	.word	0x20000008
 80009f8:	053e2d63 	.word	0x053e2d63
 80009fc:	50040000 	.word	0x50040000
 8000a00:	50040100 	.word	0x50040100
 8000a04:	50040200 	.word	0x50040200
 8000a08:	50040300 	.word	0x50040300
 8000a0c:	fff0c007 	.word	0xfff0c007

08000a10 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000a18:	4893      	ldr	r0, [pc, #588]	; (8000c68 <HAL_ADC_Start_IT+0x258>)
 8000a1a:	f7ff fdd9 	bl	80005d0 <LL_ADC_GetMultimode>
 8000a1e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe78 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	f040 8112 	bne.w	8000c56 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d101      	bne.n	8000a40 <HAL_ADC_Start_IT+0x30>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e10f      	b.n	8000c60 <HAL_ADC_Start_IT+0x250>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f000 feb3 	bl	80017b4 <ADC_Enable>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a52:	7dfb      	ldrb	r3, [r7, #23]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f040 80f9 	bne.w	8000c4c <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a62:	f023 0301 	bic.w	r3, r3, #1
 8000a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a7e      	ldr	r2, [pc, #504]	; (8000c6c <HAL_ADC_Start_IT+0x25c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d002      	beq.n	8000a7e <HAL_ADC_Start_IT+0x6e>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	e000      	b.n	8000a80 <HAL_ADC_Start_IT+0x70>
 8000a7e:	4b7c      	ldr	r3, [pc, #496]	; (8000c70 <HAL_ADC_Start_IT+0x260>)
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d002      	beq.n	8000a8e <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d105      	bne.n	8000a9a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f023 0206 	bic.w	r2, r3, #6
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8000ab2:	e002      	b.n	8000aba <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	221c      	movs	r2, #28
 8000ac0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 021c 	bic.w	r2, r2, #28
 8000ad8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	d108      	bne.n	8000af4 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	685a      	ldr	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0208 	orr.w	r2, r2, #8
 8000af0:	605a      	str	r2, [r3, #4]
          break;
 8000af2:	e008      	b.n	8000b06 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f042 0204 	orr.w	r2, r2, #4
 8000b02:	605a      	str	r2, [r3, #4]
          break;
 8000b04:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d107      	bne.n	8000b1e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f042 0210 	orr.w	r2, r2, #16
 8000b1c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a52      	ldr	r2, [pc, #328]	; (8000c6c <HAL_ADC_Start_IT+0x25c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d002      	beq.n	8000b2e <HAL_ADC_Start_IT+0x11e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	e000      	b.n	8000b30 <HAL_ADC_Start_IT+0x120>
 8000b2e:	4b50      	ldr	r3, [pc, #320]	; (8000c70 <HAL_ADC_Start_IT+0x260>)
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d008      	beq.n	8000b4a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d002      	beq.n	8000b4a <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	2b09      	cmp	r3, #9
 8000b48:	d13b      	bne.n	8000bc2 <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d02d      	beq.n	8000bb4 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d110      	bne.n	8000b92 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0220 	bic.w	r2, r2, #32
 8000b7e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b8e:	605a      	str	r2, [r3, #4]
              break;
 8000b90:	e011      	b.n	8000bb6 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ba0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0220 	orr.w	r2, r2, #32
 8000bb0:	605a      	str	r2, [r3, #4]
              break;
 8000bb2:	e000      	b.n	8000bb6 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8000bb4:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd99 	bl	80006f2 <LL_ADC_REG_StartConversion>
 8000bc0:	e04d      	b.n	8000c5e <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a26      	ldr	r2, [pc, #152]	; (8000c6c <HAL_ADC_Start_IT+0x25c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d002      	beq.n	8000bde <HAL_ADC_Start_IT+0x1ce>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	e000      	b.n	8000be0 <HAL_ADC_Start_IT+0x1d0>
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <HAL_ADC_Start_IT+0x260>)
 8000be0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d036      	beq.n	8000c5c <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d110      	bne.n	8000c28 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0220 	bic.w	r2, r2, #32
 8000c14:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c24:	605a      	str	r2, [r3, #4]
              break;
 8000c26:	e01a      	b.n	8000c5e <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c36:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0220 	orr.w	r2, r2, #32
 8000c46:	605a      	str	r2, [r3, #4]
              break;
 8000c48:	bf00      	nop
 8000c4a:	e008      	b.n	8000c5e <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000c54:	e003      	b.n	8000c5e <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c56:	2302      	movs	r3, #2
 8000c58:	75fb      	strb	r3, [r7, #23]
 8000c5a:	e000      	b.n	8000c5e <HAL_ADC_Start_IT+0x24e>
        }
 8000c5c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	50040300 	.word	0x50040300
 8000c6c:	50040100 	.word	0x50040100
 8000c70:	50040000 	.word	0x50040000

08000c74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08a      	sub	sp, #40	; 0x28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cac:	4882      	ldr	r0, [pc, #520]	; (8000eb8 <HAL_ADC_IRQHandler+0x228>)
 8000cae:	f7ff fc8f 	bl	80005d0 <LL_ADC_GetMultimode>
 8000cb2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d017      	beq.n	8000cee <HAL_ADC_IRQHandler+0x5e>
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d012      	beq.n	8000cee <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d105      	bne.n	8000ce0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fe0f 	bl	8001904 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2202      	movs	r2, #2
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d004      	beq.n	8000d02 <HAL_ADC_IRQHandler+0x72>
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10a      	bne.n	8000d18 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 8083 	beq.w	8000e14 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d07d      	beq.n	8000e14 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fbaf 	bl	8000498 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d062      	beq.n	8000e06 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a5d      	ldr	r2, [pc, #372]	; (8000ebc <HAL_ADC_IRQHandler+0x22c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d002      	beq.n	8000d50 <HAL_ADC_IRQHandler+0xc0>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	e000      	b.n	8000d52 <HAL_ADC_IRQHandler+0xc2>
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <HAL_ADC_IRQHandler+0x230>)
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d008      	beq.n	8000d6c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d005      	beq.n	8000d6c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d002      	beq.n	8000d6c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b09      	cmp	r3, #9
 8000d6a:	d104      	bne.n	8000d76 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	e00c      	b.n	8000d90 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <HAL_ADC_IRQHandler+0x22c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d002      	beq.n	8000d86 <HAL_ADC_IRQHandler+0xf6>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	e000      	b.n	8000d88 <HAL_ADC_IRQHandler+0xf8>
 8000d86:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <HAL_ADC_IRQHandler+0x230>)
 8000d88:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d135      	bne.n	8000e06 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d12e      	bne.n	8000e06 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fcb4 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d11a      	bne.n	8000dee <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 020c 	bic.w	r2, r2, #12
 8000dc6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d112      	bne.n	8000e06 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000de4:	f043 0201 	orr.w	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	655a      	str	r2, [r3, #84]	; 0x54
 8000dec:	e00b      	b.n	8000e06 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000df2:	f043 0210 	orr.w	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f043 0201 	orr.w	r2, r3, #1
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f001 fefe 	bl	8002c08 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	220c      	movs	r2, #12
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d004      	beq.n	8000e28 <HAL_ADC_IRQHandler+0x198>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f003 0320 	and.w	r3, r3, #32
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10b      	bne.n	8000e40 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 809f 	beq.w	8000f72 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f000 8099 	beq.w	8000f72 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e44:	f003 0310 	and.w	r3, r3, #16
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fb57 	bl	8000510 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8000e62:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fb15 	bl	8000498 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000e6e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_ADC_IRQHandler+0x22c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d002      	beq.n	8000e80 <HAL_ADC_IRQHandler+0x1f0>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	e000      	b.n	8000e82 <HAL_ADC_IRQHandler+0x1f2>
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_ADC_IRQHandler+0x230>)
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d008      	beq.n	8000e9c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d002      	beq.n	8000e9c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b07      	cmp	r3, #7
 8000e9a:	d104      	bne.n	8000ea6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	623b      	str	r3, [r7, #32]
 8000ea4:	e013      	b.n	8000ece <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_ADC_IRQHandler+0x22c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d009      	beq.n	8000ec4 <HAL_ADC_IRQHandler+0x234>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_ADC_IRQHandler+0x236>
 8000eb6:	bf00      	nop
 8000eb8:	50040300 	.word	0x50040300
 8000ebc:	50040100 	.word	0x50040100
 8000ec0:	50040000 	.word	0x50040000
 8000ec4:	4b7d      	ldr	r3, [pc, #500]	; (80010bc <HAL_ADC_IRQHandler+0x42c>)
 8000ec6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10c      	bne.n	8000eee <HAL_ADC_IRQHandler+0x25e>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d142      	bne.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03f      	beq.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d13a      	bne.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef8:	2b40      	cmp	r3, #64	; 0x40
 8000efa:	d133      	bne.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d12e      	bne.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fc18 	bl	8000740 <LL_ADC_INJ_IsConversionOngoing>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d11a      	bne.n	8000f4c <HAL_ADC_IRQHandler+0x2bc>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000f24:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d112      	bne.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
 8000f4a:	e00b      	b.n	8000f64 <HAL_ADC_IRQHandler+0x2d4>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f50:	f043 0210 	orr.w	r2, r3, #16
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 fca5 	bl	80018b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2260      	movs	r2, #96	; 0x60
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d011      	beq.n	8000fa0 <HAL_ADC_IRQHandler+0x310>
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f896 	bl	80010c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d012      	beq.n	8000fd0 <HAL_ADC_IRQHandler+0x340>
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00d      	beq.n	8000fd0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 fc8b 	bl	80018dc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <HAL_ADC_IRQHandler+0x370>
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00d      	beq.n	8001000 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fc7d 	bl	80018f0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ffe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	2b00      	cmp	r3, #0
 8001008:	d036      	beq.n	8001078 <HAL_ADC_IRQHandler+0x3e8>
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	2b00      	cmp	r3, #0
 8001012:	d031      	beq.n	8001078 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800101c:	2301      	movs	r3, #1
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
 8001020:	e014      	b.n	800104c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <HAL_ADC_IRQHandler+0x430>)
 800102a:	f7ff fadf 	bl	80005ec <LL_ADC_GetMultiDMATransfer>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001034:	2301      	movs	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	e008      	b.n	800104c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	2b01      	cmp	r3, #1
 8001050:	d10e      	bne.n	8001070 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001056:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f043 0202 	orr.w	r2, r3, #2
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f834 	bl	80010d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2210      	movs	r2, #16
 8001076:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107e:	2b00      	cmp	r3, #0
 8001080:	d018      	beq.n	80010b4 <HAL_ADC_IRQHandler+0x424>
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001088:	2b00      	cmp	r3, #0
 800108a:	d013      	beq.n	80010b4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001090:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f043 0208 	orr.w	r2, r3, #8
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f000 fc0a 	bl	80018c8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	50040000 	.word	0x50040000
 80010c0:	50040300 	.word	0x50040300

080010c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a6      	sub	sp, #152	; 0x98
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_ConfigChannel+0x22>
 800110a:	2302      	movs	r3, #2
 800110c:	e348      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x6b4>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fafd 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8329 	bne.w	800177a <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d824      	bhi.n	800117a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	3b02      	subs	r3, #2
 8001136:	2b03      	cmp	r3, #3
 8001138:	d81b      	bhi.n	8001172 <HAL_ADC_ConfigChannel+0x86>
 800113a:	a201      	add	r2, pc, #4	; (adr r2, 8001140 <HAL_ADC_ConfigChannel+0x54>)
 800113c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001140:	08001151 	.word	0x08001151
 8001144:	08001159 	.word	0x08001159
 8001148:	08001161 	.word	0x08001161
 800114c:	08001169 	.word	0x08001169
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	220c      	movs	r2, #12
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	e011      	b.n	800117c <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	2212      	movs	r2, #18
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e00d      	b.n	800117c <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2218      	movs	r2, #24
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	e009      	b.n	800117c <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	e004      	b.n	800117c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2206      	movs	r2, #6
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	e000      	b.n	800117c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800117a:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	f7ff f998 	bl	80004be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fac1 	bl	800071a <LL_ADC_REG_IsConversionOngoing>
 8001198:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff facd 	bl	8000740 <LL_ADC_INJ_IsConversionOngoing>
 80011a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80011aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f040 8148 	bne.w	8001444 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80011b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f040 8143 	bne.w	8001444 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	461a      	mov	r2, r3
 80011cc:	f7ff f9b3 	bl	8000536 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	695a      	ldr	r2, [r3, #20]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	08db      	lsrs	r3, r3, #3
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d00a      	beq.n	8001208 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6919      	ldr	r1, [r3, #16]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001202:	f7ff f8fb 	bl	80003fc <LL_ADC_SetOffset>
 8001206:	e11d      	b.n	8001444 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f916 	bl	8000440 <LL_ADC_GetOffsetChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x148>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f90b 	bl	8000440 <LL_ADC_GetOffsetChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	0e9b      	lsrs	r3, r3, #26
 800122e:	f003 021f 	and.w	r2, r3, #31
 8001232:	e012      	b.n	800125a <HAL_ADC_ConfigChannel+0x16e>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f900 	bl	8000440 <LL_ADC_GetOffsetChannel>
 8001240:	4603      	mov	r3, r0
 8001242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	461a      	mov	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_ADC_ConfigChannel+0x186>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	0e9b      	lsrs	r3, r3, #26
 800126c:	f003 031f 	and.w	r3, r3, #31
 8001270:	e00a      	b.n	8001288 <HAL_ADC_ConfigChannel+0x19c>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	b2db      	uxtb	r3, r3
 8001288:	429a      	cmp	r2, r3
 800128a:	d106      	bne.n	800129a <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f8e7 	bl	8000468 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f8cd 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10a      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x1da>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f8c2 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	0e9b      	lsrs	r3, r3, #26
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	e010      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1fc>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2101      	movs	r1, #1
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8b7 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012d8:	fa93 f3a3 	rbit	r3, r3
 80012dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80012de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x214>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0e9b      	lsrs	r3, r3, #26
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	e00a      	b.n	8001316 <HAL_ADC_ConfigChannel+0x22a>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800130e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	d106      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2200      	movs	r2, #0
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8a0 	bl	8000468 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f886 	bl	8000440 <LL_ADC_GetOffsetChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10a      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x268>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2102      	movs	r1, #2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f87b 	bl	8000440 <LL_ADC_GetOffsetChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	0e9b      	lsrs	r3, r3, #26
 800134e:	f003 021f 	and.w	r2, r3, #31
 8001352:	e010      	b.n	8001376 <HAL_ADC_ConfigChannel+0x28a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f870 	bl	8000440 <LL_ADC_GetOffsetChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800136c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136e:	fab3 f383 	clz	r3, r3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <HAL_ADC_ConfigChannel+0x2a2>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0e9b      	lsrs	r3, r3, #26
 8001388:	f003 031f 	and.w	r3, r3, #31
 800138c:	e00a      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x2b8>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d106      	bne.n	80013b6 <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2200      	movs	r2, #0
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f859 	bl	8000468 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2103      	movs	r1, #3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f83f 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d10a      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x2f6>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2103      	movs	r1, #3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f834 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	0e9b      	lsrs	r3, r3, #26
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	e010      	b.n	8001404 <HAL_ADC_ConfigChannel+0x318>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2103      	movs	r1, #3
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f829 	bl	8000440 <LL_ADC_GetOffsetChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f4:	fa93 f3a3 	rbit	r3, r3
 80013f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80013fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <HAL_ADC_ConfigChannel+0x330>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0e9b      	lsrs	r3, r3, #26
 8001416:	f003 031f 	and.w	r3, r3, #31
 800141a:	e00a      	b.n	8001432 <HAL_ADC_ConfigChannel+0x346>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800142a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800142c:	fab3 f383 	clz	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	429a      	cmp	r2, r3
 8001434:	d106      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	2103      	movs	r1, #3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f812 	bl	8000468 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f93f 	bl	80006cc <LL_ADC_IsEnabled>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 810c 	bne.w	800166e <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	6819      	ldr	r1, [r3, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	461a      	mov	r2, r3
 8001464:	f7ff f890 	bl	8000588 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4aad      	ldr	r2, [pc, #692]	; (8001724 <HAL_ADC_ConfigChannel+0x638>)
 800146e:	4293      	cmp	r3, r2
 8001470:	f040 80fd 	bne.w	800166e <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <HAL_ADC_ConfigChannel+0x3b0>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0e9b      	lsrs	r3, r3, #26
 800148a:	3301      	adds	r3, #1
 800148c:	f003 031f 	and.w	r3, r3, #31
 8001490:	2b09      	cmp	r3, #9
 8001492:	bf94      	ite	ls
 8001494:	2301      	movls	r3, #1
 8001496:	2300      	movhi	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e012      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x3d6>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80014aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	bf94      	ite	ls
 80014bc:	2301      	movls	r3, #1
 80014be:	2300      	movhi	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d064      	beq.n	8001590 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d107      	bne.n	80014e2 <HAL_ADC_ConfigChannel+0x3f6>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0e9b      	lsrs	r3, r3, #26
 80014d8:	3301      	adds	r3, #1
 80014da:	069b      	lsls	r3, r3, #26
 80014dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e0:	e00e      	b.n	8001500 <HAL_ADC_ConfigChannel+0x414>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80014f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f2:	fab3 f383 	clz	r3, r3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	069b      	lsls	r3, r3, #26
 80014fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x434>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0e9b      	lsrs	r3, r3, #26
 8001512:	3301      	adds	r3, #1
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	e010      	b.n	8001542 <HAL_ADC_ConfigChannel+0x456>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	ea42 0103 	orr.w	r1, r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10a      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x47c>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	f003 021f 	and.w	r2, r3, #31
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	051b      	lsls	r3, r3, #20
 8001566:	e011      	b.n	800158c <HAL_ADC_ConfigChannel+0x4a0>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800158c:	430b      	orrs	r3, r1
 800158e:	e069      	b.n	8001664 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001598:	2b00      	cmp	r3, #0
 800159a:	d107      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x4c0>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	0e9b      	lsrs	r3, r3, #26
 80015a2:	3301      	adds	r3, #1
 80015a4:	069b      	lsls	r3, r3, #26
 80015a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015aa:	e00e      	b.n	80015ca <HAL_ADC_ConfigChannel+0x4de>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	61fb      	str	r3, [r7, #28]
  return result;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3301      	adds	r3, #1
 80015c4:	069b      	lsls	r3, r3, #26
 80015c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x4fe>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0e9b      	lsrs	r3, r3, #26
 80015dc:	3301      	adds	r3, #1
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	e010      	b.n	800160c <HAL_ADC_ConfigChannel+0x520>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	617b      	str	r3, [r7, #20]
  return result;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	3301      	adds	r3, #1
 8001602:	f003 031f 	and.w	r3, r3, #31
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	ea42 0103 	orr.w	r1, r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x54c>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0e9b      	lsrs	r3, r3, #26
 8001622:	3301      	adds	r3, #1
 8001624:	f003 021f 	and.w	r2, r3, #31
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	3b1e      	subs	r3, #30
 8001630:	051b      	lsls	r3, r3, #20
 8001632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001636:	e014      	b.n	8001662 <HAL_ADC_ConfigChannel+0x576>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	60fb      	str	r3, [r7, #12]
  return result;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	b2db      	uxtb	r3, r3
 800164e:	3301      	adds	r3, #1
 8001650:	f003 021f 	and.w	r2, r3, #31
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3b1e      	subs	r3, #30
 800165c:	051b      	lsls	r3, r3, #20
 800165e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001662:	430b      	orrs	r3, r1
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6892      	ldr	r2, [r2, #8]
 8001668:	4619      	mov	r1, r3
 800166a:	f7fe ff64 	bl	8000536 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_ADC_ConfigChannel+0x63c>)
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 808c 	beq.w	8001794 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800167c:	482b      	ldr	r0, [pc, #172]	; (800172c <HAL_ADC_ConfigChannel+0x640>)
 800167e:	f7fe feaf 	bl	80003e0 <LL_ADC_GetCommonPathInternalCh>
 8001682:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_ADC_ConfigChannel+0x644>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d12b      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x5fc>
 8001690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d125      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_ADC_ConfigChannel+0x648>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d004      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x5c4>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <HAL_ADC_ConfigChannel+0x64c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d16e      	bne.n	800178e <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b8:	4619      	mov	r1, r3
 80016ba:	481c      	ldr	r0, [pc, #112]	; (800172c <HAL_ADC_ConfigChannel+0x640>)
 80016bc:	f7fe fe7d 	bl	80003ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_ADC_ConfigChannel+0x650>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_ADC_ConfigChannel+0x654>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	099a      	lsrs	r2, r3, #6
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	3b01      	subs	r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f9      	bne.n	80016da <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016e6:	e052      	b.n	800178e <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_ADC_ConfigChannel+0x658>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12a      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x65c>
 80016f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d124      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_ADC_ConfigChannel+0x648>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d004      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x626>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0a      	ldr	r2, [pc, #40]	; (8001738 <HAL_ADC_ConfigChannel+0x64c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d13f      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001712:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	4619      	mov	r1, r3
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <HAL_ADC_ConfigChannel+0x640>)
 800171e:	f7fe fe4c 	bl	80003ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001722:	e036      	b.n	8001792 <HAL_ADC_ConfigChannel+0x6a6>
 8001724:	407f0000 	.word	0x407f0000
 8001728:	80080000 	.word	0x80080000
 800172c:	50040300 	.word	0x50040300
 8001730:	c7520000 	.word	0xc7520000
 8001734:	50040000 	.word	0x50040000
 8001738:	50040200 	.word	0x50040200
 800173c:	20000008 	.word	0x20000008
 8001740:	053e2d63 	.word	0x053e2d63
 8001744:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_ADC_ConfigChannel+0x6bc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d120      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001752:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11a      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <HAL_ADC_ConfigChannel+0x6c0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d115      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001770:	4619      	mov	r1, r3
 8001772:	480f      	ldr	r0, [pc, #60]	; (80017b0 <HAL_ADC_ConfigChannel+0x6c4>)
 8001774:	f7fe fe21 	bl	80003ba <LL_ADC_SetCommonPathInternalCh>
 8001778:	e00c      	b.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177e:	f043 0220 	orr.w	r2, r3, #32
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800178c:	e002      	b.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800178e:	bf00      	nop
 8001790:	e000      	b.n	8001794 <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001792:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800179c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3798      	adds	r7, #152	; 0x98
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	80000001 	.word	0x80000001
 80017ac:	50040000 	.word	0x50040000
 80017b0:	50040300 	.word	0x50040300

080017b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe ff83 	bl	80006cc <LL_ADC_IsEnabled>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d146      	bne.n	800185a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <ADC_Enable+0xb0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00d      	beq.n	80017f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	f043 0210 	orr.w	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	f043 0201 	orr.w	r2, r3, #1
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e032      	b.n	800185c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe ff52 	bl	80006a4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001800:	f7fe fd9a 	bl	8000338 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001806:	e021      	b.n	800184c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe ff5d 	bl	80006cc <LL_ADC_IsEnabled>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d104      	bne.n	8001822 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ff41 	bl	80006a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001822:	f7fe fd89 	bl	8000338 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d90d      	bls.n	800184c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f043 0210 	orr.w	r2, r3, #16
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e007      	b.n	800185c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d1d6      	bne.n	8001808 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	8000003f 	.word	0x8000003f

08001868 <LL_ADC_IsEnabled>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <LL_ADC_IsEnabled+0x18>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_ADC_IsEnabled+0x1a>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_REG_IsConversionOngoing>:
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b09f      	sub	sp, #124	; 0x7c
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001932:	2302      	movs	r3, #2
 8001934:	e08f      	b.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a47      	ldr	r2, [pc, #284]	; (8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d102      	bne.n	800194e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001948:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	e001      	b.n	8001952 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10b      	bne.n	8001970 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e072      	b.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff8b 	bl	800188e <LL_ADC_REG_IsConversionOngoing>
 8001978:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff85 	bl	800188e <LL_ADC_REG_IsConversionOngoing>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d154      	bne.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800198a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800198c:	2b00      	cmp	r3, #0
 800198e:	d151      	bne.n	8001a34 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001992:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d02c      	beq.n	80019f6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800199c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019ae:	035b      	lsls	r3, r3, #13
 80019b0:	430b      	orrs	r3, r1
 80019b2:	431a      	orrs	r2, r3
 80019b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019b8:	4829      	ldr	r0, [pc, #164]	; (8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80019ba:	f7ff ff55 	bl	8001868 <LL_ADC_IsEnabled>
 80019be:	4604      	mov	r4, r0
 80019c0:	4828      	ldr	r0, [pc, #160]	; (8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80019c2:	f7ff ff51 	bl	8001868 <LL_ADC_IsEnabled>
 80019c6:	4603      	mov	r3, r0
 80019c8:	431c      	orrs	r4, r3
 80019ca:	4828      	ldr	r0, [pc, #160]	; (8001a6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80019cc:	f7ff ff4c 	bl	8001868 <LL_ADC_IsEnabled>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4323      	orrs	r3, r4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d137      	bne.n	8001a48 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80019d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80019e0:	f023 030f 	bic.w	r3, r3, #15
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	6811      	ldr	r1, [r2, #0]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	6892      	ldr	r2, [r2, #8]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	431a      	orrs	r2, r3
 80019f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80019f4:	e028      	b.n	8001a48 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80019f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a02:	4817      	ldr	r0, [pc, #92]	; (8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8001a04:	f7ff ff30 	bl	8001868 <LL_ADC_IsEnabled>
 8001a08:	4604      	mov	r4, r0
 8001a0a:	4816      	ldr	r0, [pc, #88]	; (8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8001a0c:	f7ff ff2c 	bl	8001868 <LL_ADC_IsEnabled>
 8001a10:	4603      	mov	r3, r0
 8001a12:	431c      	orrs	r4, r3
 8001a14:	4815      	ldr	r0, [pc, #84]	; (8001a6c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001a16:	f7ff ff27 	bl	8001868 <LL_ADC_IsEnabled>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d112      	bne.n	8001a48 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a2a:	f023 030f 	bic.w	r3, r3, #15
 8001a2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001a30:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a32:	e009      	b.n	8001a48 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001a46:	e000      	b.n	8001a4a <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	377c      	adds	r7, #124	; 0x7c
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd90      	pop	{r4, r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	50040000 	.word	0x50040000
 8001a64:	50040100 	.word	0x50040100
 8001a68:	50040300 	.word	0x50040300
 8001a6c:	50040200 	.word	0x50040200

08001a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <__NVIC_EnableIRQ+0x38>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff29 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c38:	f7ff ff3e 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	6978      	ldr	r0, [r7, #20]
 8001c44:	f7ff ff8e 	bl	8001b64 <NVIC_EncodePriority>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff5d 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c56:	bf00      	nop
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff31 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffa2 	bl	8001bcc <SysTick_Config>
 8001c88:	4603      	mov	r3, r0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e17f      	b.n	8001fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8171 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x38>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d123      	bne.n	8001d14 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	08da      	lsrs	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3208      	adds	r2, #8
 8001cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	220f      	movs	r2, #15
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	691a      	ldr	r2, [r3, #16]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	6939      	ldr	r1, [r7, #16]
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d00b      	beq.n	8001d68 <HAL_GPIO_Init+0xd4>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d007      	beq.n	8001d68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	2b11      	cmp	r3, #17
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d130      	bne.n	8001dca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9e:	2201      	movs	r2, #1
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	091b      	lsrs	r3, r3, #4
 8001db4:	f003 0201 	and.w	r2, r3, #1
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d118      	bne.n	8001e08 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ac 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	4a5d      	ldr	r2, [pc, #372]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6613      	str	r3, [r2, #96]	; 0x60
 8001e52:	4b5b      	ldr	r3, [pc, #364]	; (8001fc0 <HAL_GPIO_Init+0x32c>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5e:	4a59      	ldr	r2, [pc, #356]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x242>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x338>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_GPIO_Init+0x340>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4a      	ldr	r2, [pc, #296]	; (8001fd8 <HAL_GPIO_Init+0x344>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a49      	ldr	r2, [pc, #292]	; (8001fdc <HAL_GPIO_Init+0x348>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee8:	4936      	ldr	r1, [pc, #216]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef6:	4b3a      	ldr	r3, [pc, #232]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1a:	4a31      	ldr	r2, [pc, #196]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f20:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f44:	4a26      	ldr	r2, [pc, #152]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4a:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f98:	4a11      	ldr	r2, [pc, #68]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae78 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	48000400 	.word	0x48000400
 8001fcc:	48000800 	.word	0x48000800
 8001fd0:	48000c00 	.word	0x48000c00
 8001fd4:	48001000 	.word	0x48001000
 8001fd8:	48001400 	.word	0x48001400
 8001fdc:	48001800 	.word	0x48001800
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002000:	e002      	b.n	8002008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	4013      	ands	r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002032:	e002      	b.n	800203a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800204c:	4b04      	ldr	r3, [pc, #16]	; (8002060 <HAL_PWREx_GetVoltageRange+0x18>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40007000 	.word	0x40007000

08002064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002072:	d130      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002074:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800207c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002080:	d038      	beq.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2232      	movs	r2, #50	; 0x32
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	4a1b      	ldr	r2, [pc, #108]	; (800210c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	3301      	adds	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a8:	e002      	b.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d102      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f2      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d0:	d110      	bne.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e00f      	b.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d007      	beq.n	80020f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ec:	4a05      	ldr	r2, [pc, #20]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40007000 	.word	0x40007000
 8002108:	20000008 	.word	0x20000008
 800210c:	431bde83 	.word	0x431bde83

08002110 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e39d      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002122:	4ba4      	ldr	r3, [pc, #656]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
 800212a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	4ba1      	ldr	r3, [pc, #644]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80e1 	beq.w	8002306 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <HAL_RCC_OscConfig+0x4a>
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b0c      	cmp	r3, #12
 800214e:	f040 8088 	bne.w	8002262 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b01      	cmp	r3, #1
 8002156:	f040 8084 	bne.w	8002262 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800215a:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x62>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e375      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1a      	ldr	r2, [r3, #32]
 8002176:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_RCC_OscConfig+0x7c>
 8002182:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	e005      	b.n	8002198 <HAL_RCC_OscConfig+0x88>
 800218c:	4b89      	ldr	r3, [pc, #548]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	091b      	lsrs	r3, r3, #4
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	4293      	cmp	r3, r2
 800219a:	d223      	bcs.n	80021e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fcd1 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e356      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b80      	ldr	r3, [pc, #512]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7f      	ldr	r2, [pc, #508]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	497a      	ldr	r1, [pc, #488]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ce:	4b79      	ldr	r3, [pc, #484]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	4975      	ldr	r1, [pc, #468]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
 80021e2:	e022      	b.n	800222a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021e4:	4b73      	ldr	r3, [pc, #460]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a72      	ldr	r2, [pc, #456]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	496d      	ldr	r1, [pc, #436]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4968      	ldr	r1, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fc94 	bl	8002b48 <RCC_SetFlashLatencyFromMSIRange>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e319      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800222a:	f000 fc03 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 800222e:	4601      	mov	r1, r0
 8002230:	4b60      	ldr	r3, [pc, #384]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	4a5f      	ldr	r2, [pc, #380]	; (80023b8 <HAL_RCC_OscConfig+0x2a8>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a5d      	ldr	r2, [pc, #372]	; (80023bc <HAL_RCC_OscConfig+0x2ac>)
 8002248:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800224a:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <HAL_RCC_OscConfig+0x2b0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f826 	bl	80002a0 <HAL_InitTick>
 8002254:	4603      	mov	r3, r0
 8002256:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d052      	beq.n	8002304 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	e2fd      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d032      	beq.n	80022d0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800226a:	4b52      	ldr	r3, [pc, #328]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002276:	f7fe f85f 	bl	8000338 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227e:	f7fe f85b 	bl	8000338 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e2e6      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002290:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229c:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022a2:	f043 0308 	orr.w	r3, r3, #8
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	493a      	ldr	r1, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
 80022ce:	e01a      	b.n	8002306 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022d0:	4b38      	ldr	r3, [pc, #224]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022dc:	f7fe f82c 	bl	8000338 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022e4:	f7fe f828 	bl	8000338 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e2b3      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1d4>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d074      	beq.n	80023fc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x214>
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d10e      	bne.n	800233c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10b      	bne.n	800233c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d064      	beq.n	80023fa <HAL_RCC_OscConfig+0x2ea>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d160      	bne.n	80023fa <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e290      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x244>
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e01d      	b.n	8002390 <HAL_RCC_OscConfig+0x280>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x268>
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a14      	ldr	r2, [pc, #80]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a11      	ldr	r2, [pc, #68]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x280>
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800237e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_RCC_OscConfig+0x2a4>)
 800238a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fd ffce 	bl	8000338 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239e:	e011      	b.n	80023c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7fd ffca 	bl	8000338 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d90a      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e255      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08003fec 	.word	0x08003fec
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c4:	4bae      	ldr	r3, [pc, #696]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0e7      	beq.n	80023a0 <HAL_RCC_OscConfig+0x290>
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7fd ffb1 	bl	8000338 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023da:	f7fd ffad 	bl	8000338 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e238      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ec:	4ba4      	ldr	r3, [pc, #656]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x2ca>
 80023f8:	e000      	b.n	80023fc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d060      	beq.n	80024ca <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x30a>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b0c      	cmp	r3, #12
 8002412:	d119      	bne.n	8002448 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d116      	bne.n	8002448 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241a:	4b99      	ldr	r3, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x322>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e215      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002432:	4b93      	ldr	r3, [pc, #588]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	061b      	lsls	r3, r3, #24
 8002440:	498f      	ldr	r1, [pc, #572]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002446:	e040      	b.n	80024ca <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d023      	beq.n	8002498 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fd ff6c 	bl	8000338 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fd ff68 	bl	8000338 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1f3      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	061b      	lsls	r3, r3, #24
 8002490:	497b      	ldr	r1, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002492:	4313      	orrs	r3, r2
 8002494:	604b      	str	r3, [r1, #4]
 8002496:	e018      	b.n	80024ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002498:	4b79      	ldr	r3, [pc, #484]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a78      	ldr	r2, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800249e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fd ff48 	bl	8000338 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fd ff44 	bl	8000338 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e1cf      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03c      	beq.n	8002550 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b68      	ldr	r3, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80024e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e4:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fd ff23 	bl	8000338 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f6:	f7fd ff1f 	bl	8000338 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1aa      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002508:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ef      	beq.n	80024f6 <HAL_RCC_OscConfig+0x3e6>
 8002516:	e01b      	b.n	8002550 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800251a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251e:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002528:	f7fd ff06 	bl	8000338 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002530:	f7fd ff02 	bl	8000338 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e18d      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ef      	bne.n	8002530 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a5 	beq.w	80026a8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6593      	str	r3, [r2, #88]	; 0x58
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <HAL_RCC_OscConfig+0x574>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_RCC_OscConfig+0x574>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a3a      	ldr	r2, [pc, #232]	; (8002684 <HAL_RCC_OscConfig+0x574>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fd fec9 	bl	8000338 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fd fec5 	bl	8000338 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e150      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <HAL_RCC_OscConfig+0x574>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d108      	bne.n	80025e2 <HAL_RCC_OscConfig+0x4d2>
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d6:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e0:	e024      	b.n	800262c <HAL_RCC_OscConfig+0x51c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d110      	bne.n	800260c <HAL_RCC_OscConfig+0x4fc>
 80025ea:	4b25      	ldr	r3, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	4a1f      	ldr	r2, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800260a:	e00f      	b.n	800262c <HAL_RCC_OscConfig+0x51c>
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d016      	beq.n	8002662 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fd fe80 	bl	8000338 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7fd fe7c 	bl	8000338 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e105      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x570>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ed      	beq.n	800263c <HAL_RCC_OscConfig+0x52c>
 8002660:	e019      	b.n	8002696 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002662:	f7fd fe69 	bl	8000338 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	e00e      	b.n	8002688 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7fd fe65 	bl	8000338 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d905      	bls.n	8002688 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0ee      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e9      	bne.n	800266a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b72      	ldr	r3, [pc, #456]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a71      	ldr	r2, [pc, #452]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80d5 	beq.w	800285c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	f000 808e 	beq.w	80027d6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d15b      	bne.n	800277a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a68      	ldr	r2, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80026c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fd fe33 	bl	8000338 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fd fe2f 	bl	8000338 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0ba      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	4b5f      	ldr	r3, [pc, #380]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f4:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	4b5c      	ldr	r3, [pc, #368]	; (800286c <HAL_RCC_OscConfig+0x75c>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002704:	3a01      	subs	r2, #1
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	4311      	orrs	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800270e:	0212      	lsls	r2, r2, #8
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	4311      	orrs	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002722:	0852      	lsrs	r2, r2, #1
 8002724:	3a01      	subs	r2, #1
 8002726:	0652      	lsls	r2, r2, #25
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800272e:	0912      	lsrs	r2, r2, #4
 8002730:	0452      	lsls	r2, r2, #17
 8002732:	430a      	orrs	r2, r1
 8002734:	494c      	ldr	r1, [pc, #304]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800273a:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a4a      	ldr	r2, [pc, #296]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002740:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002744:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002746:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a47      	ldr	r2, [pc, #284]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800274c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002750:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fd fdf1 	bl	8000338 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fd fded 	bl	8000338 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e078      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276c:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x64a>
 8002778:	e070      	b.n	800285c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277a:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a3a      	ldr	r2, [pc, #232]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002786:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002792:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	4a34      	ldr	r2, [pc, #208]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 8002798:	f023 0303 	bic.w	r3, r3, #3
 800279c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800279e:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80027a4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fd fdc3 	bl	8000338 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7fd fdbf 	bl	8000338 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e04a      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x6a6>
 80027d4:	e042      	b.n	800285c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03d      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_RCC_OscConfig+0x758>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d130      	bne.n	8002858 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	3b01      	subs	r3, #1
 8002802:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d127      	bne.n	8002858 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002812:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d11f      	bne.n	8002858 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002822:	2a07      	cmp	r2, #7
 8002824:	bf14      	ite	ne
 8002826:	2201      	movne	r2, #1
 8002828:	2200      	moveq	r2, #0
 800282a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d113      	bne.n	8002858 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d109      	bne.n	8002858 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3720      	adds	r7, #32
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	f99d808c 	.word	0xf99d808c

08002870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0c8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b66      	ldr	r3, [pc, #408]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4961      	ldr	r1, [pc, #388]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0b0      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d04c      	beq.n	800295a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c8:	4b56      	ldr	r3, [pc, #344]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d121      	bne.n	8002918 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e09e      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d115      	bne.n	8002918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e092      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e086      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e07e      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002918:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	493f      	ldr	r1, [pc, #252]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292a:	f7fd fd05 	bl	8000338 <HAL_GetTick>
 800292e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002930:	e00a      	b.n	8002948 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7fd fd01 	bl	8000338 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e066      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 020c 	and.w	r2, r3, #12
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	429a      	cmp	r2, r3
 8002958:	d1eb      	bne.n	8002932 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	492c      	ldr	r1, [pc, #176]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d210      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 0207 	bic.w	r2, r3, #7
 800298e:	4924      	ldr	r1, [pc, #144]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1b0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e036      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4918      	ldr	r1, [pc, #96]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4910      	ldr	r1, [pc, #64]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e6:	f000 f825 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fc48 	bl	80002a0 <HAL_InitTick>
 8002a10:	4603      	mov	r3, r0
 8002a12:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a14:	7afb      	ldrb	r3, [r7, #11]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	08003fec 	.word	0x08003fec
 8002a2c:	20000008 	.word	0x20000008
 8002a30:	20000000 	.word	0x20000000

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d121      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d11e      	bne.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a68:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a90:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	e004      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d133      	bne.n	8002b2a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0xaa>
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ada:	617b      	str	r3, [r7, #20]
      break;
 8002adc:	e005      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ae0:	617b      	str	r3, [r7, #20]
      break;
 8002ae2:	e002      	b.n	8002aea <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	617b      	str	r3, [r7, #20]
      break;
 8002ae8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	3301      	adds	r3, #1
 8002af6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	0a1b      	lsrs	r3, r3, #8
 8002afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	fb02 f203 	mul.w	r2, r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0e5b      	lsrs	r3, r3, #25
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3724      	adds	r7, #36	; 0x24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	08003ffc 	.word	0x08003ffc
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	007a1200 	.word	0x007a1200

08002b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b60:	f7ff fa72 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 8002b64:	6178      	str	r0, [r7, #20]
 8002b66:	e014      	b.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	4a24      	ldr	r2, [pc, #144]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
 8002b74:	4b22      	ldr	r3, [pc, #136]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b80:	f7ff fa62 	bl	8002048 <HAL_PWREx_GetVoltageRange>
 8002b84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b98:	d10b      	bne.n	8002bb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d919      	bls.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ba4:	d902      	bls.n	8002bac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	e013      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	e010      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d902      	bls.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bb8:	2303      	movs	r3, #3
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	e00a      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b80      	cmp	r3, #128	; 0x80
 8002bc2:	d102      	bne.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	e004      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d101      	bne.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 0207 	bic.w	r2, r3, #7
 8002bdc:	4909      	ldr	r1, [pc, #36]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d001      	beq.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40022000 	.word	0x40022000

08002c08 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t value;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	value = HAL_ADC_GetValue(hadc1);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fe f82f 	bl	8000c74 <HAL_ADC_GetValue>
 8002c16:	4602      	mov	r2, r0
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_ADC_ConvCpltCallback+0x30>)
 8002c1a:	601a      	str	r2, [r3, #0]
	printf("\n\r ADC val == %d", value);
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_ADC_ConvCpltCallback+0x30>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	4806      	ldr	r0, [pc, #24]	; (8002c3c <HAL_ADC_ConvCpltCallback+0x34>)
 8002c24:	f000 fae8 	bl	80031f8 <iprintf>
	HAL_ADC_Start_IT(hadc1); // Re-Start ADC1 under Interrupt
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7fd fef1 	bl	8000a10 <HAL_ADC_Start_IT>
							 // this is necessary because we don'use
							 // the Continuous Conversion Mode
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000100 	.word	0x20000100
 8002c3c:	08003fd8 	.word	0x08003fd8

08002c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c44:	f7fd fb14 	bl	8000270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c48:	f000 f812 	bl	8002c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c4c:	f000 f8ce 	bl	8002dec <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c50:	f000 f854 	bl	8002cfc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);  // start ADC in interrupt mode
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <main+0x2c>)
 8002c56:	f7fd fedb 	bl	8000a10 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c5a:	2120      	movs	r1, #32
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c60:	f7ff f9d8 	bl	8002014 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8002c64:	2064      	movs	r0, #100	; 0x64
 8002c66:	f7fd fb73 	bl	8000350 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c6a:	e7f6      	b.n	8002c5a <main+0x1a>
 8002c6c:	2000009c 	.word	0x2000009c

08002c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b096      	sub	sp, #88	; 0x58
 8002c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	2244      	movs	r2, #68	; 0x44
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fab2 	bl	80031e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c84:	463b      	mov	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002c92:	2310      	movs	r3, #16
 8002c94:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002c96:	2301      	movs	r3, #1
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002c9e:	2360      	movs	r3, #96	; 0x60
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fa30 	bl	8002110 <HAL_RCC_OscConfig>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8002cb6:	f000 f8c9 	bl	8002e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cba:	230f      	movs	r3, #15
 8002cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cce:	463b      	mov	r3, r7
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fdcc 	bl	8002870 <HAL_RCC_ClockConfig>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002cde:	f000 f8b5 	bl	8002e4c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ce2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ce6:	f7ff f9bd 	bl	8002064 <HAL_PWREx_ControlVoltageScaling>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002cf0:	f000 f8ac 	bl	8002e4c <Error_Handler>
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3758      	adds	r7, #88	; 0x58
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002d02:	f107 031c 	add.w	r3, r7, #28
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d20:	4a30      	ldr	r2, [pc, #192]	; (8002de4 <MX_ADC1_Init+0xe8>)
 8002d22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d26:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d2c:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d40:	2204      	movs	r2, #4
 8002d42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002d50:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d56:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d80:	4817      	ldr	r0, [pc, #92]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d82:	f7fd fcf1 	bl	8000768 <HAL_ADC_Init>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002d8c:	f000 f85e 	bl	8002e4c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d94:	f107 031c 	add.w	r3, r7, #28
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4811      	ldr	r0, [pc, #68]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002d9c:	f7fe fdbc 	bl	8001918 <HAL_ADCEx_MultiModeConfigChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8002da6:	f000 f851 	bl	8002e4c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_ADC1_Init+0xec>)
 8002dac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002dae:	2306      	movs	r3, #6
 8002db0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8002db2:	2303      	movs	r3, #3
 8002db4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002db6:	237f      	movs	r3, #127	; 0x7f
 8002db8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4806      	ldr	r0, [pc, #24]	; (8002de0 <MX_ADC1_Init+0xe4>)
 8002dc8:	f7fe f990 	bl	80010ec <HAL_ADC_ConfigChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8002dd2:	f000 f83b 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	3728      	adds	r7, #40	; 0x28
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	2000009c 	.word	0x2000009c
 8002de4:	50040000 	.word	0x50040000
 8002de8:	14f00020 	.word	0x14f00020

08002dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <MX_GPIO_Init+0x5c>)
 8002e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <MX_GPIO_Init+0x5c>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <MX_GPIO_Init+0x5c>)
 8002e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e20:	f7ff f8e0 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002e24:	2320      	movs	r3, #32
 8002e26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3c:	f7fe ff2a 	bl	8001c94 <HAL_GPIO_Init>

}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6593      	str	r3, [r2, #88]	; 0x58
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_MspInit+0x44>)
 8002e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a19      	ldr	r2, [pc, #100]	; (8002f28 <HAL_ADC_MspInit+0x84>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d12c      	bne.n	8002f20 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_ADC_MspInit+0x88>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002efa:	230b      	movs	r3, #11
 8002efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0c:	f7fe fec2 	bl	8001c94 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2100      	movs	r1, #0
 8002f14:	2012      	movs	r0, #18
 8002f16:	f7fe fe86 	bl	8001c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f1a:	2012      	movs	r0, #18
 8002f1c:	f7fe fe9f 	bl	8001c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f20:	bf00      	nop
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	50040000 	.word	0x50040000
 8002f2c:	40021000 	.word	0x40021000

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f84:	f7fd f9c6 	bl	8000314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <ADC1_2_IRQHandler+0x10>)
 8002f92:	f7fd fe7d 	bl	8000c90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000009c 	.word	0x2000009c

08002fa0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e00a      	b.n	8002fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fb2:	f3af 8000 	nop.w
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	60ba      	str	r2, [r7, #8]
 8002fbe:	b2ca      	uxtb	r2, r1
 8002fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	dbf0      	blt.n	8002fb2 <_read+0x12>
	}

return len;
 8002fd0:	687b      	ldr	r3, [r7, #4]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b086      	sub	sp, #24
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e009      	b.n	8003000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	60ba      	str	r2, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	617b      	str	r3, [r7, #20]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	dbf1      	blt.n	8002fec <_write+0x12>
	}
	return len;
 8003008:	687b      	ldr	r3, [r7, #4]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3718      	adds	r7, #24
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <_close>:

int _close(int file)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
	return -1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800303a:	605a      	str	r2, [r3, #4]
	return 0;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <_isatty>:

int _isatty(int file)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
	return 1;
 8003052:	2301      	movs	r3, #1
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
	return 0;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <_sbrk+0x50>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <_sbrk+0x16>
		heap_end = &end;
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <_sbrk+0x50>)
 800308e:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <_sbrk+0x54>)
 8003090:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <_sbrk+0x50>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <_sbrk+0x50>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	466a      	mov	r2, sp
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d907      	bls.n	80030b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030a6:	f000 f875 	bl	8003194 <__errno>
 80030aa:	4602      	mov	r2, r0
 80030ac:	230c      	movs	r3, #12
 80030ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	e006      	b.n	80030c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <_sbrk+0x50>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <_sbrk+0x50>)
 80030c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	2000008c 	.word	0x2000008c
 80030d0:	20000108 	.word	0x20000108

080030d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <SystemInit+0x64>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <SystemInit+0x64>)
 80030e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <SystemInit+0x68>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a13      	ldr	r2, [pc, #76]	; (800313c <SystemInit+0x68>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <SystemInit+0x68>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <SystemInit+0x68>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a0f      	ldr	r2, [pc, #60]	; (800313c <SystemInit+0x68>)
 8003100:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003104:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003108:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <SystemInit+0x68>)
 800310c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003110:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <SystemInit+0x68>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a09      	ldr	r2, [pc, #36]	; (800313c <SystemInit+0x68>)
 8003118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <SystemInit+0x68>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SystemInit+0x64>)
 8003126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800312a:	609a      	str	r2, [r3, #8]
#endif
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	40021000 	.word	0x40021000

08003140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003178 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003144:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003146:	e003      	b.n	8003150 <LoopCopyDataInit>

08003148 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800314a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800314c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800314e:	3104      	adds	r1, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003154:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003156:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003158:	d3f6      	bcc.n	8003148 <CopyDataInit>
	ldr	r2, =_sbss
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <LoopForever+0x12>)
	b	LoopFillZerobss
 800315c:	e002      	b.n	8003164 <LoopFillZerobss>

0800315e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800315e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003160:	f842 3b04 	str.w	r3, [r2], #4

08003164 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <LoopForever+0x16>)
	cmp	r2, r3
 8003166:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003168:	d3f9      	bcc.n	800315e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800316a:	f7ff ffb3 	bl	80030d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316e:	f000 f817 	bl	80031a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003172:	f7ff fd65 	bl	8002c40 <main>

08003176 <LoopForever>:

LoopForever:
    b LoopForever
 8003176:	e7fe      	b.n	8003176 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003178:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800317c:	080040cc 	.word	0x080040cc
	ldr	r0, =_sdata
 8003180:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003184:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8003188:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800318c:	20000108 	.word	0x20000108

08003190 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC3_IRQHandler>
	...

08003194 <__errno>:
 8003194:	4b01      	ldr	r3, [pc, #4]	; (800319c <__errno+0x8>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	2000000c 	.word	0x2000000c

080031a0 <__libc_init_array>:
 80031a0:	b570      	push	{r4, r5, r6, lr}
 80031a2:	4e0d      	ldr	r6, [pc, #52]	; (80031d8 <__libc_init_array+0x38>)
 80031a4:	4c0d      	ldr	r4, [pc, #52]	; (80031dc <__libc_init_array+0x3c>)
 80031a6:	1ba4      	subs	r4, r4, r6
 80031a8:	10a4      	asrs	r4, r4, #2
 80031aa:	2500      	movs	r5, #0
 80031ac:	42a5      	cmp	r5, r4
 80031ae:	d109      	bne.n	80031c4 <__libc_init_array+0x24>
 80031b0:	4e0b      	ldr	r6, [pc, #44]	; (80031e0 <__libc_init_array+0x40>)
 80031b2:	4c0c      	ldr	r4, [pc, #48]	; (80031e4 <__libc_init_array+0x44>)
 80031b4:	f000 ff04 	bl	8003fc0 <_init>
 80031b8:	1ba4      	subs	r4, r4, r6
 80031ba:	10a4      	asrs	r4, r4, #2
 80031bc:	2500      	movs	r5, #0
 80031be:	42a5      	cmp	r5, r4
 80031c0:	d105      	bne.n	80031ce <__libc_init_array+0x2e>
 80031c2:	bd70      	pop	{r4, r5, r6, pc}
 80031c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c8:	4798      	blx	r3
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7ee      	b.n	80031ac <__libc_init_array+0xc>
 80031ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d2:	4798      	blx	r3
 80031d4:	3501      	adds	r5, #1
 80031d6:	e7f2      	b.n	80031be <__libc_init_array+0x1e>
 80031d8:	080040c4 	.word	0x080040c4
 80031dc:	080040c4 	.word	0x080040c4
 80031e0:	080040c4 	.word	0x080040c4
 80031e4:	080040c8 	.word	0x080040c8

080031e8 <memset>:
 80031e8:	4402      	add	r2, r0
 80031ea:	4603      	mov	r3, r0
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d100      	bne.n	80031f2 <memset+0xa>
 80031f0:	4770      	bx	lr
 80031f2:	f803 1b01 	strb.w	r1, [r3], #1
 80031f6:	e7f9      	b.n	80031ec <memset+0x4>

080031f8 <iprintf>:
 80031f8:	b40f      	push	{r0, r1, r2, r3}
 80031fa:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <iprintf+0x2c>)
 80031fc:	b513      	push	{r0, r1, r4, lr}
 80031fe:	681c      	ldr	r4, [r3, #0]
 8003200:	b124      	cbz	r4, 800320c <iprintf+0x14>
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	b913      	cbnz	r3, 800320c <iprintf+0x14>
 8003206:	4620      	mov	r0, r4
 8003208:	f000 f84e 	bl	80032a8 <__sinit>
 800320c:	ab05      	add	r3, sp, #20
 800320e:	9a04      	ldr	r2, [sp, #16]
 8003210:	68a1      	ldr	r1, [r4, #8]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	4620      	mov	r0, r4
 8003216:	f000 f955 	bl	80034c4 <_vfiprintf_r>
 800321a:	b002      	add	sp, #8
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003220:	b004      	add	sp, #16
 8003222:	4770      	bx	lr
 8003224:	2000000c 	.word	0x2000000c

08003228 <std>:
 8003228:	2300      	movs	r3, #0
 800322a:	b510      	push	{r4, lr}
 800322c:	4604      	mov	r4, r0
 800322e:	e9c0 3300 	strd	r3, r3, [r0]
 8003232:	6083      	str	r3, [r0, #8]
 8003234:	8181      	strh	r1, [r0, #12]
 8003236:	6643      	str	r3, [r0, #100]	; 0x64
 8003238:	81c2      	strh	r2, [r0, #14]
 800323a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800323e:	6183      	str	r3, [r0, #24]
 8003240:	4619      	mov	r1, r3
 8003242:	2208      	movs	r2, #8
 8003244:	305c      	adds	r0, #92	; 0x5c
 8003246:	f7ff ffcf 	bl	80031e8 <memset>
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <std+0x38>)
 800324c:	6263      	str	r3, [r4, #36]	; 0x24
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <std+0x3c>)
 8003250:	62a3      	str	r3, [r4, #40]	; 0x28
 8003252:	4b05      	ldr	r3, [pc, #20]	; (8003268 <std+0x40>)
 8003254:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <std+0x44>)
 8003258:	6224      	str	r4, [r4, #32]
 800325a:	6323      	str	r3, [r4, #48]	; 0x30
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	08003a21 	.word	0x08003a21
 8003264:	08003a43 	.word	0x08003a43
 8003268:	08003a7b 	.word	0x08003a7b
 800326c:	08003a9f 	.word	0x08003a9f

08003270 <_cleanup_r>:
 8003270:	4901      	ldr	r1, [pc, #4]	; (8003278 <_cleanup_r+0x8>)
 8003272:	f000 b885 	b.w	8003380 <_fwalk_reent>
 8003276:	bf00      	nop
 8003278:	08003d79 	.word	0x08003d79

0800327c <__sfmoreglue>:
 800327c:	b570      	push	{r4, r5, r6, lr}
 800327e:	1e4a      	subs	r2, r1, #1
 8003280:	2568      	movs	r5, #104	; 0x68
 8003282:	4355      	muls	r5, r2
 8003284:	460e      	mov	r6, r1
 8003286:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800328a:	f000 f897 	bl	80033bc <_malloc_r>
 800328e:	4604      	mov	r4, r0
 8003290:	b140      	cbz	r0, 80032a4 <__sfmoreglue+0x28>
 8003292:	2100      	movs	r1, #0
 8003294:	e9c0 1600 	strd	r1, r6, [r0]
 8003298:	300c      	adds	r0, #12
 800329a:	60a0      	str	r0, [r4, #8]
 800329c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032a0:	f7ff ffa2 	bl	80031e8 <memset>
 80032a4:	4620      	mov	r0, r4
 80032a6:	bd70      	pop	{r4, r5, r6, pc}

080032a8 <__sinit>:
 80032a8:	6983      	ldr	r3, [r0, #24]
 80032aa:	b510      	push	{r4, lr}
 80032ac:	4604      	mov	r4, r0
 80032ae:	bb33      	cbnz	r3, 80032fe <__sinit+0x56>
 80032b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80032b4:	6503      	str	r3, [r0, #80]	; 0x50
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <__sinit+0x58>)
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <__sinit+0x5c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6282      	str	r2, [r0, #40]	; 0x28
 80032be:	4298      	cmp	r0, r3
 80032c0:	bf04      	itt	eq
 80032c2:	2301      	moveq	r3, #1
 80032c4:	6183      	streq	r3, [r0, #24]
 80032c6:	f000 f81f 	bl	8003308 <__sfp>
 80032ca:	6060      	str	r0, [r4, #4]
 80032cc:	4620      	mov	r0, r4
 80032ce:	f000 f81b 	bl	8003308 <__sfp>
 80032d2:	60a0      	str	r0, [r4, #8]
 80032d4:	4620      	mov	r0, r4
 80032d6:	f000 f817 	bl	8003308 <__sfp>
 80032da:	2200      	movs	r2, #0
 80032dc:	60e0      	str	r0, [r4, #12]
 80032de:	2104      	movs	r1, #4
 80032e0:	6860      	ldr	r0, [r4, #4]
 80032e2:	f7ff ffa1 	bl	8003228 <std>
 80032e6:	2201      	movs	r2, #1
 80032e8:	2109      	movs	r1, #9
 80032ea:	68a0      	ldr	r0, [r4, #8]
 80032ec:	f7ff ff9c 	bl	8003228 <std>
 80032f0:	2202      	movs	r2, #2
 80032f2:	2112      	movs	r1, #18
 80032f4:	68e0      	ldr	r0, [r4, #12]
 80032f6:	f7ff ff97 	bl	8003228 <std>
 80032fa:	2301      	movs	r3, #1
 80032fc:	61a3      	str	r3, [r4, #24]
 80032fe:	bd10      	pop	{r4, pc}
 8003300:	0800402c 	.word	0x0800402c
 8003304:	08003271 	.word	0x08003271

08003308 <__sfp>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <__sfp+0x70>)
 800330c:	681e      	ldr	r6, [r3, #0]
 800330e:	69b3      	ldr	r3, [r6, #24]
 8003310:	4607      	mov	r7, r0
 8003312:	b913      	cbnz	r3, 800331a <__sfp+0x12>
 8003314:	4630      	mov	r0, r6
 8003316:	f7ff ffc7 	bl	80032a8 <__sinit>
 800331a:	3648      	adds	r6, #72	; 0x48
 800331c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003320:	3b01      	subs	r3, #1
 8003322:	d503      	bpl.n	800332c <__sfp+0x24>
 8003324:	6833      	ldr	r3, [r6, #0]
 8003326:	b133      	cbz	r3, 8003336 <__sfp+0x2e>
 8003328:	6836      	ldr	r6, [r6, #0]
 800332a:	e7f7      	b.n	800331c <__sfp+0x14>
 800332c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003330:	b16d      	cbz	r5, 800334e <__sfp+0x46>
 8003332:	3468      	adds	r4, #104	; 0x68
 8003334:	e7f4      	b.n	8003320 <__sfp+0x18>
 8003336:	2104      	movs	r1, #4
 8003338:	4638      	mov	r0, r7
 800333a:	f7ff ff9f 	bl	800327c <__sfmoreglue>
 800333e:	6030      	str	r0, [r6, #0]
 8003340:	2800      	cmp	r0, #0
 8003342:	d1f1      	bne.n	8003328 <__sfp+0x20>
 8003344:	230c      	movs	r3, #12
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4604      	mov	r4, r0
 800334a:	4620      	mov	r0, r4
 800334c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <__sfp+0x74>)
 8003350:	6665      	str	r5, [r4, #100]	; 0x64
 8003352:	e9c4 5500 	strd	r5, r5, [r4]
 8003356:	60a5      	str	r5, [r4, #8]
 8003358:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800335c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003360:	2208      	movs	r2, #8
 8003362:	4629      	mov	r1, r5
 8003364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003368:	f7ff ff3e 	bl	80031e8 <memset>
 800336c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003370:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003374:	e7e9      	b.n	800334a <__sfp+0x42>
 8003376:	bf00      	nop
 8003378:	0800402c 	.word	0x0800402c
 800337c:	ffff0001 	.word	0xffff0001

08003380 <_fwalk_reent>:
 8003380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003384:	4680      	mov	r8, r0
 8003386:	4689      	mov	r9, r1
 8003388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800338c:	2600      	movs	r6, #0
 800338e:	b914      	cbnz	r4, 8003396 <_fwalk_reent+0x16>
 8003390:	4630      	mov	r0, r6
 8003392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003396:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800339a:	3f01      	subs	r7, #1
 800339c:	d501      	bpl.n	80033a2 <_fwalk_reent+0x22>
 800339e:	6824      	ldr	r4, [r4, #0]
 80033a0:	e7f5      	b.n	800338e <_fwalk_reent+0xe>
 80033a2:	89ab      	ldrh	r3, [r5, #12]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d907      	bls.n	80033b8 <_fwalk_reent+0x38>
 80033a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033ac:	3301      	adds	r3, #1
 80033ae:	d003      	beq.n	80033b8 <_fwalk_reent+0x38>
 80033b0:	4629      	mov	r1, r5
 80033b2:	4640      	mov	r0, r8
 80033b4:	47c8      	blx	r9
 80033b6:	4306      	orrs	r6, r0
 80033b8:	3568      	adds	r5, #104	; 0x68
 80033ba:	e7ee      	b.n	800339a <_fwalk_reent+0x1a>

080033bc <_malloc_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	1ccd      	adds	r5, r1, #3
 80033c0:	f025 0503 	bic.w	r5, r5, #3
 80033c4:	3508      	adds	r5, #8
 80033c6:	2d0c      	cmp	r5, #12
 80033c8:	bf38      	it	cc
 80033ca:	250c      	movcc	r5, #12
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	4606      	mov	r6, r0
 80033d0:	db01      	blt.n	80033d6 <_malloc_r+0x1a>
 80033d2:	42a9      	cmp	r1, r5
 80033d4:	d903      	bls.n	80033de <_malloc_r+0x22>
 80033d6:	230c      	movs	r3, #12
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	2000      	movs	r0, #0
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	f000 fd6b 	bl	8003eb8 <__malloc_lock>
 80033e2:	4a21      	ldr	r2, [pc, #132]	; (8003468 <_malloc_r+0xac>)
 80033e4:	6814      	ldr	r4, [r2, #0]
 80033e6:	4621      	mov	r1, r4
 80033e8:	b991      	cbnz	r1, 8003410 <_malloc_r+0x54>
 80033ea:	4c20      	ldr	r4, [pc, #128]	; (800346c <_malloc_r+0xb0>)
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	b91b      	cbnz	r3, 80033f8 <_malloc_r+0x3c>
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 fb05 	bl	8003a00 <_sbrk_r>
 80033f6:	6020      	str	r0, [r4, #0]
 80033f8:	4629      	mov	r1, r5
 80033fa:	4630      	mov	r0, r6
 80033fc:	f000 fb00 	bl	8003a00 <_sbrk_r>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d124      	bne.n	800344e <_malloc_r+0x92>
 8003404:	230c      	movs	r3, #12
 8003406:	6033      	str	r3, [r6, #0]
 8003408:	4630      	mov	r0, r6
 800340a:	f000 fd56 	bl	8003eba <__malloc_unlock>
 800340e:	e7e4      	b.n	80033da <_malloc_r+0x1e>
 8003410:	680b      	ldr	r3, [r1, #0]
 8003412:	1b5b      	subs	r3, r3, r5
 8003414:	d418      	bmi.n	8003448 <_malloc_r+0x8c>
 8003416:	2b0b      	cmp	r3, #11
 8003418:	d90f      	bls.n	800343a <_malloc_r+0x7e>
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	50cd      	str	r5, [r1, r3]
 800341e:	18cc      	adds	r4, r1, r3
 8003420:	4630      	mov	r0, r6
 8003422:	f000 fd4a 	bl	8003eba <__malloc_unlock>
 8003426:	f104 000b 	add.w	r0, r4, #11
 800342a:	1d23      	adds	r3, r4, #4
 800342c:	f020 0007 	bic.w	r0, r0, #7
 8003430:	1ac3      	subs	r3, r0, r3
 8003432:	d0d3      	beq.n	80033dc <_malloc_r+0x20>
 8003434:	425a      	negs	r2, r3
 8003436:	50e2      	str	r2, [r4, r3]
 8003438:	e7d0      	b.n	80033dc <_malloc_r+0x20>
 800343a:	428c      	cmp	r4, r1
 800343c:	684b      	ldr	r3, [r1, #4]
 800343e:	bf16      	itet	ne
 8003440:	6063      	strne	r3, [r4, #4]
 8003442:	6013      	streq	r3, [r2, #0]
 8003444:	460c      	movne	r4, r1
 8003446:	e7eb      	b.n	8003420 <_malloc_r+0x64>
 8003448:	460c      	mov	r4, r1
 800344a:	6849      	ldr	r1, [r1, #4]
 800344c:	e7cc      	b.n	80033e8 <_malloc_r+0x2c>
 800344e:	1cc4      	adds	r4, r0, #3
 8003450:	f024 0403 	bic.w	r4, r4, #3
 8003454:	42a0      	cmp	r0, r4
 8003456:	d005      	beq.n	8003464 <_malloc_r+0xa8>
 8003458:	1a21      	subs	r1, r4, r0
 800345a:	4630      	mov	r0, r6
 800345c:	f000 fad0 	bl	8003a00 <_sbrk_r>
 8003460:	3001      	adds	r0, #1
 8003462:	d0cf      	beq.n	8003404 <_malloc_r+0x48>
 8003464:	6025      	str	r5, [r4, #0]
 8003466:	e7db      	b.n	8003420 <_malloc_r+0x64>
 8003468:	20000090 	.word	0x20000090
 800346c:	20000094 	.word	0x20000094

08003470 <__sfputc_r>:
 8003470:	6893      	ldr	r3, [r2, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	2b00      	cmp	r3, #0
 8003476:	b410      	push	{r4}
 8003478:	6093      	str	r3, [r2, #8]
 800347a:	da08      	bge.n	800348e <__sfputc_r+0x1e>
 800347c:	6994      	ldr	r4, [r2, #24]
 800347e:	42a3      	cmp	r3, r4
 8003480:	db01      	blt.n	8003486 <__sfputc_r+0x16>
 8003482:	290a      	cmp	r1, #10
 8003484:	d103      	bne.n	800348e <__sfputc_r+0x1e>
 8003486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348a:	f000 bb0d 	b.w	8003aa8 <__swbuf_r>
 800348e:	6813      	ldr	r3, [r2, #0]
 8003490:	1c58      	adds	r0, r3, #1
 8003492:	6010      	str	r0, [r2, #0]
 8003494:	7019      	strb	r1, [r3, #0]
 8003496:	4608      	mov	r0, r1
 8003498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800349c:	4770      	bx	lr

0800349e <__sfputs_r>:
 800349e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a0:	4606      	mov	r6, r0
 80034a2:	460f      	mov	r7, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	18d5      	adds	r5, r2, r3
 80034a8:	42ac      	cmp	r4, r5
 80034aa:	d101      	bne.n	80034b0 <__sfputs_r+0x12>
 80034ac:	2000      	movs	r0, #0
 80034ae:	e007      	b.n	80034c0 <__sfputs_r+0x22>
 80034b0:	463a      	mov	r2, r7
 80034b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b6:	4630      	mov	r0, r6
 80034b8:	f7ff ffda 	bl	8003470 <__sfputc_r>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d1f3      	bne.n	80034a8 <__sfputs_r+0xa>
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034c4 <_vfiprintf_r>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	460c      	mov	r4, r1
 80034ca:	b09d      	sub	sp, #116	; 0x74
 80034cc:	4617      	mov	r7, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	4606      	mov	r6, r0
 80034d2:	b118      	cbz	r0, 80034dc <_vfiprintf_r+0x18>
 80034d4:	6983      	ldr	r3, [r0, #24]
 80034d6:	b90b      	cbnz	r3, 80034dc <_vfiprintf_r+0x18>
 80034d8:	f7ff fee6 	bl	80032a8 <__sinit>
 80034dc:	4b7c      	ldr	r3, [pc, #496]	; (80036d0 <_vfiprintf_r+0x20c>)
 80034de:	429c      	cmp	r4, r3
 80034e0:	d158      	bne.n	8003594 <_vfiprintf_r+0xd0>
 80034e2:	6874      	ldr	r4, [r6, #4]
 80034e4:	89a3      	ldrh	r3, [r4, #12]
 80034e6:	0718      	lsls	r0, r3, #28
 80034e8:	d55e      	bpl.n	80035a8 <_vfiprintf_r+0xe4>
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05b      	beq.n	80035a8 <_vfiprintf_r+0xe4>
 80034f0:	2300      	movs	r3, #0
 80034f2:	9309      	str	r3, [sp, #36]	; 0x24
 80034f4:	2320      	movs	r3, #32
 80034f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034fa:	2330      	movs	r3, #48	; 0x30
 80034fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003500:	9503      	str	r5, [sp, #12]
 8003502:	f04f 0b01 	mov.w	fp, #1
 8003506:	46b8      	mov	r8, r7
 8003508:	4645      	mov	r5, r8
 800350a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800350e:	b10b      	cbz	r3, 8003514 <_vfiprintf_r+0x50>
 8003510:	2b25      	cmp	r3, #37	; 0x25
 8003512:	d154      	bne.n	80035be <_vfiprintf_r+0xfa>
 8003514:	ebb8 0a07 	subs.w	sl, r8, r7
 8003518:	d00b      	beq.n	8003532 <_vfiprintf_r+0x6e>
 800351a:	4653      	mov	r3, sl
 800351c:	463a      	mov	r2, r7
 800351e:	4621      	mov	r1, r4
 8003520:	4630      	mov	r0, r6
 8003522:	f7ff ffbc 	bl	800349e <__sfputs_r>
 8003526:	3001      	adds	r0, #1
 8003528:	f000 80c2 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 800352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352e:	4453      	add	r3, sl
 8003530:	9309      	str	r3, [sp, #36]	; 0x24
 8003532:	f898 3000 	ldrb.w	r3, [r8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 80ba 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 800353c:	2300      	movs	r3, #0
 800353e:	f04f 32ff 	mov.w	r2, #4294967295
 8003542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003546:	9304      	str	r3, [sp, #16]
 8003548:	9307      	str	r3, [sp, #28]
 800354a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800354e:	931a      	str	r3, [sp, #104]	; 0x68
 8003550:	46a8      	mov	r8, r5
 8003552:	2205      	movs	r2, #5
 8003554:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003558:	485e      	ldr	r0, [pc, #376]	; (80036d4 <_vfiprintf_r+0x210>)
 800355a:	f7fc fe39 	bl	80001d0 <memchr>
 800355e:	9b04      	ldr	r3, [sp, #16]
 8003560:	bb78      	cbnz	r0, 80035c2 <_vfiprintf_r+0xfe>
 8003562:	06d9      	lsls	r1, r3, #27
 8003564:	bf44      	itt	mi
 8003566:	2220      	movmi	r2, #32
 8003568:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800356c:	071a      	lsls	r2, r3, #28
 800356e:	bf44      	itt	mi
 8003570:	222b      	movmi	r2, #43	; 0x2b
 8003572:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003576:	782a      	ldrb	r2, [r5, #0]
 8003578:	2a2a      	cmp	r2, #42	; 0x2a
 800357a:	d02a      	beq.n	80035d2 <_vfiprintf_r+0x10e>
 800357c:	9a07      	ldr	r2, [sp, #28]
 800357e:	46a8      	mov	r8, r5
 8003580:	2000      	movs	r0, #0
 8003582:	250a      	movs	r5, #10
 8003584:	4641      	mov	r1, r8
 8003586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800358a:	3b30      	subs	r3, #48	; 0x30
 800358c:	2b09      	cmp	r3, #9
 800358e:	d969      	bls.n	8003664 <_vfiprintf_r+0x1a0>
 8003590:	b360      	cbz	r0, 80035ec <_vfiprintf_r+0x128>
 8003592:	e024      	b.n	80035de <_vfiprintf_r+0x11a>
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <_vfiprintf_r+0x214>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d101      	bne.n	800359e <_vfiprintf_r+0xda>
 800359a:	68b4      	ldr	r4, [r6, #8]
 800359c:	e7a2      	b.n	80034e4 <_vfiprintf_r+0x20>
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <_vfiprintf_r+0x218>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	bf08      	it	eq
 80035a4:	68f4      	ldreq	r4, [r6, #12]
 80035a6:	e79d      	b.n	80034e4 <_vfiprintf_r+0x20>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 fae0 	bl	8003b70 <__swsetup_r>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d09d      	beq.n	80034f0 <_vfiprintf_r+0x2c>
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	b01d      	add	sp, #116	; 0x74
 80035ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035be:	46a8      	mov	r8, r5
 80035c0:	e7a2      	b.n	8003508 <_vfiprintf_r+0x44>
 80035c2:	4a44      	ldr	r2, [pc, #272]	; (80036d4 <_vfiprintf_r+0x210>)
 80035c4:	1a80      	subs	r0, r0, r2
 80035c6:	fa0b f000 	lsl.w	r0, fp, r0
 80035ca:	4318      	orrs	r0, r3
 80035cc:	9004      	str	r0, [sp, #16]
 80035ce:	4645      	mov	r5, r8
 80035d0:	e7be      	b.n	8003550 <_vfiprintf_r+0x8c>
 80035d2:	9a03      	ldr	r2, [sp, #12]
 80035d4:	1d11      	adds	r1, r2, #4
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	9103      	str	r1, [sp, #12]
 80035da:	2a00      	cmp	r2, #0
 80035dc:	db01      	blt.n	80035e2 <_vfiprintf_r+0x11e>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e004      	b.n	80035ec <_vfiprintf_r+0x128>
 80035e2:	4252      	negs	r2, r2
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	9207      	str	r2, [sp, #28]
 80035ea:	9304      	str	r3, [sp, #16]
 80035ec:	f898 3000 	ldrb.w	r3, [r8]
 80035f0:	2b2e      	cmp	r3, #46	; 0x2e
 80035f2:	d10e      	bne.n	8003612 <_vfiprintf_r+0x14e>
 80035f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80035f8:	2b2a      	cmp	r3, #42	; 0x2a
 80035fa:	d138      	bne.n	800366e <_vfiprintf_r+0x1aa>
 80035fc:	9b03      	ldr	r3, [sp, #12]
 80035fe:	1d1a      	adds	r2, r3, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	9203      	str	r2, [sp, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	bfb8      	it	lt
 8003608:	f04f 33ff 	movlt.w	r3, #4294967295
 800360c:	f108 0802 	add.w	r8, r8, #2
 8003610:	9305      	str	r3, [sp, #20]
 8003612:	4d33      	ldr	r5, [pc, #204]	; (80036e0 <_vfiprintf_r+0x21c>)
 8003614:	f898 1000 	ldrb.w	r1, [r8]
 8003618:	2203      	movs	r2, #3
 800361a:	4628      	mov	r0, r5
 800361c:	f7fc fdd8 	bl	80001d0 <memchr>
 8003620:	b140      	cbz	r0, 8003634 <_vfiprintf_r+0x170>
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	1b40      	subs	r0, r0, r5
 8003626:	fa03 f000 	lsl.w	r0, r3, r0
 800362a:	9b04      	ldr	r3, [sp, #16]
 800362c:	4303      	orrs	r3, r0
 800362e:	f108 0801 	add.w	r8, r8, #1
 8003632:	9304      	str	r3, [sp, #16]
 8003634:	f898 1000 	ldrb.w	r1, [r8]
 8003638:	482a      	ldr	r0, [pc, #168]	; (80036e4 <_vfiprintf_r+0x220>)
 800363a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800363e:	2206      	movs	r2, #6
 8003640:	f108 0701 	add.w	r7, r8, #1
 8003644:	f7fc fdc4 	bl	80001d0 <memchr>
 8003648:	2800      	cmp	r0, #0
 800364a:	d037      	beq.n	80036bc <_vfiprintf_r+0x1f8>
 800364c:	4b26      	ldr	r3, [pc, #152]	; (80036e8 <_vfiprintf_r+0x224>)
 800364e:	bb1b      	cbnz	r3, 8003698 <_vfiprintf_r+0x1d4>
 8003650:	9b03      	ldr	r3, [sp, #12]
 8003652:	3307      	adds	r3, #7
 8003654:	f023 0307 	bic.w	r3, r3, #7
 8003658:	3308      	adds	r3, #8
 800365a:	9303      	str	r3, [sp, #12]
 800365c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800365e:	444b      	add	r3, r9
 8003660:	9309      	str	r3, [sp, #36]	; 0x24
 8003662:	e750      	b.n	8003506 <_vfiprintf_r+0x42>
 8003664:	fb05 3202 	mla	r2, r5, r2, r3
 8003668:	2001      	movs	r0, #1
 800366a:	4688      	mov	r8, r1
 800366c:	e78a      	b.n	8003584 <_vfiprintf_r+0xc0>
 800366e:	2300      	movs	r3, #0
 8003670:	f108 0801 	add.w	r8, r8, #1
 8003674:	9305      	str	r3, [sp, #20]
 8003676:	4619      	mov	r1, r3
 8003678:	250a      	movs	r5, #10
 800367a:	4640      	mov	r0, r8
 800367c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003680:	3a30      	subs	r2, #48	; 0x30
 8003682:	2a09      	cmp	r2, #9
 8003684:	d903      	bls.n	800368e <_vfiprintf_r+0x1ca>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d0c3      	beq.n	8003612 <_vfiprintf_r+0x14e>
 800368a:	9105      	str	r1, [sp, #20]
 800368c:	e7c1      	b.n	8003612 <_vfiprintf_r+0x14e>
 800368e:	fb05 2101 	mla	r1, r5, r1, r2
 8003692:	2301      	movs	r3, #1
 8003694:	4680      	mov	r8, r0
 8003696:	e7f0      	b.n	800367a <_vfiprintf_r+0x1b6>
 8003698:	ab03      	add	r3, sp, #12
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	4622      	mov	r2, r4
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <_vfiprintf_r+0x228>)
 80036a0:	a904      	add	r1, sp, #16
 80036a2:	4630      	mov	r0, r6
 80036a4:	f3af 8000 	nop.w
 80036a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036ac:	4681      	mov	r9, r0
 80036ae:	d1d5      	bne.n	800365c <_vfiprintf_r+0x198>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	065b      	lsls	r3, r3, #25
 80036b4:	f53f af7e 	bmi.w	80035b4 <_vfiprintf_r+0xf0>
 80036b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036ba:	e77d      	b.n	80035b8 <_vfiprintf_r+0xf4>
 80036bc:	ab03      	add	r3, sp, #12
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	4622      	mov	r2, r4
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <_vfiprintf_r+0x228>)
 80036c4:	a904      	add	r1, sp, #16
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 f888 	bl	80037dc <_printf_i>
 80036cc:	e7ec      	b.n	80036a8 <_vfiprintf_r+0x1e4>
 80036ce:	bf00      	nop
 80036d0:	08004050 	.word	0x08004050
 80036d4:	08004090 	.word	0x08004090
 80036d8:	08004070 	.word	0x08004070
 80036dc:	08004030 	.word	0x08004030
 80036e0:	08004096 	.word	0x08004096
 80036e4:	0800409a 	.word	0x0800409a
 80036e8:	00000000 	.word	0x00000000
 80036ec:	0800349f 	.word	0x0800349f

080036f0 <_printf_common>:
 80036f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f4:	4691      	mov	r9, r2
 80036f6:	461f      	mov	r7, r3
 80036f8:	688a      	ldr	r2, [r1, #8]
 80036fa:	690b      	ldr	r3, [r1, #16]
 80036fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003700:	4293      	cmp	r3, r2
 8003702:	bfb8      	it	lt
 8003704:	4613      	movlt	r3, r2
 8003706:	f8c9 3000 	str.w	r3, [r9]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	4606      	mov	r6, r0
 8003710:	460c      	mov	r4, r1
 8003712:	b112      	cbz	r2, 800371a <_printf_common+0x2a>
 8003714:	3301      	adds	r3, #1
 8003716:	f8c9 3000 	str.w	r3, [r9]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003724:	3302      	addmi	r3, #2
 8003726:	f8c9 3000 	strmi.w	r3, [r9]
 800372a:	6825      	ldr	r5, [r4, #0]
 800372c:	f015 0506 	ands.w	r5, r5, #6
 8003730:	d107      	bne.n	8003742 <_printf_common+0x52>
 8003732:	f104 0a19 	add.w	sl, r4, #25
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	f8d9 2000 	ldr.w	r2, [r9]
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	42ab      	cmp	r3, r5
 8003740:	dc28      	bgt.n	8003794 <_printf_common+0xa4>
 8003742:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	3300      	adds	r3, #0
 800374a:	bf18      	it	ne
 800374c:	2301      	movne	r3, #1
 800374e:	0692      	lsls	r2, r2, #26
 8003750:	d42d      	bmi.n	80037ae <_printf_common+0xbe>
 8003752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003756:	4639      	mov	r1, r7
 8003758:	4630      	mov	r0, r6
 800375a:	47c0      	blx	r8
 800375c:	3001      	adds	r0, #1
 800375e:	d020      	beq.n	80037a2 <_printf_common+0xb2>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	68e5      	ldr	r5, [r4, #12]
 8003764:	f8d9 2000 	ldr.w	r2, [r9]
 8003768:	f003 0306 	and.w	r3, r3, #6
 800376c:	2b04      	cmp	r3, #4
 800376e:	bf08      	it	eq
 8003770:	1aad      	subeq	r5, r5, r2
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf0c      	ite	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	2500      	movne	r5, #0
 800377e:	4293      	cmp	r3, r2
 8003780:	bfc4      	itt	gt
 8003782:	1a9b      	subgt	r3, r3, r2
 8003784:	18ed      	addgt	r5, r5, r3
 8003786:	f04f 0900 	mov.w	r9, #0
 800378a:	341a      	adds	r4, #26
 800378c:	454d      	cmp	r5, r9
 800378e:	d11a      	bne.n	80037c6 <_printf_common+0xd6>
 8003790:	2000      	movs	r0, #0
 8003792:	e008      	b.n	80037a6 <_printf_common+0xb6>
 8003794:	2301      	movs	r3, #1
 8003796:	4652      	mov	r2, sl
 8003798:	4639      	mov	r1, r7
 800379a:	4630      	mov	r0, r6
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d103      	bne.n	80037aa <_printf_common+0xba>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7c3      	b.n	8003736 <_printf_common+0x46>
 80037ae:	18e1      	adds	r1, r4, r3
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	2030      	movs	r0, #48	; 0x30
 80037b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b8:	4422      	add	r2, r4
 80037ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c2:	3302      	adds	r3, #2
 80037c4:	e7c5      	b.n	8003752 <_printf_common+0x62>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4622      	mov	r2, r4
 80037ca:	4639      	mov	r1, r7
 80037cc:	4630      	mov	r0, r6
 80037ce:	47c0      	blx	r8
 80037d0:	3001      	adds	r0, #1
 80037d2:	d0e6      	beq.n	80037a2 <_printf_common+0xb2>
 80037d4:	f109 0901 	add.w	r9, r9, #1
 80037d8:	e7d8      	b.n	800378c <_printf_common+0x9c>
	...

080037dc <_printf_i>:
 80037dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037e4:	460c      	mov	r4, r1
 80037e6:	7e09      	ldrb	r1, [r1, #24]
 80037e8:	b085      	sub	sp, #20
 80037ea:	296e      	cmp	r1, #110	; 0x6e
 80037ec:	4617      	mov	r7, r2
 80037ee:	4606      	mov	r6, r0
 80037f0:	4698      	mov	r8, r3
 80037f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f4:	f000 80b3 	beq.w	800395e <_printf_i+0x182>
 80037f8:	d822      	bhi.n	8003840 <_printf_i+0x64>
 80037fa:	2963      	cmp	r1, #99	; 0x63
 80037fc:	d036      	beq.n	800386c <_printf_i+0x90>
 80037fe:	d80a      	bhi.n	8003816 <_printf_i+0x3a>
 8003800:	2900      	cmp	r1, #0
 8003802:	f000 80b9 	beq.w	8003978 <_printf_i+0x19c>
 8003806:	2958      	cmp	r1, #88	; 0x58
 8003808:	f000 8083 	beq.w	8003912 <_printf_i+0x136>
 800380c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003810:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003814:	e032      	b.n	800387c <_printf_i+0xa0>
 8003816:	2964      	cmp	r1, #100	; 0x64
 8003818:	d001      	beq.n	800381e <_printf_i+0x42>
 800381a:	2969      	cmp	r1, #105	; 0x69
 800381c:	d1f6      	bne.n	800380c <_printf_i+0x30>
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	6813      	ldr	r3, [r2, #0]
 8003822:	0605      	lsls	r5, r0, #24
 8003824:	f103 0104 	add.w	r1, r3, #4
 8003828:	d52a      	bpl.n	8003880 <_printf_i+0xa4>
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6011      	str	r1, [r2, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	da03      	bge.n	800383a <_printf_i+0x5e>
 8003832:	222d      	movs	r2, #45	; 0x2d
 8003834:	425b      	negs	r3, r3
 8003836:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800383a:	486f      	ldr	r0, [pc, #444]	; (80039f8 <_printf_i+0x21c>)
 800383c:	220a      	movs	r2, #10
 800383e:	e039      	b.n	80038b4 <_printf_i+0xd8>
 8003840:	2973      	cmp	r1, #115	; 0x73
 8003842:	f000 809d 	beq.w	8003980 <_printf_i+0x1a4>
 8003846:	d808      	bhi.n	800385a <_printf_i+0x7e>
 8003848:	296f      	cmp	r1, #111	; 0x6f
 800384a:	d020      	beq.n	800388e <_printf_i+0xb2>
 800384c:	2970      	cmp	r1, #112	; 0x70
 800384e:	d1dd      	bne.n	800380c <_printf_i+0x30>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	f043 0320 	orr.w	r3, r3, #32
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	e003      	b.n	8003862 <_printf_i+0x86>
 800385a:	2975      	cmp	r1, #117	; 0x75
 800385c:	d017      	beq.n	800388e <_printf_i+0xb2>
 800385e:	2978      	cmp	r1, #120	; 0x78
 8003860:	d1d4      	bne.n	800380c <_printf_i+0x30>
 8003862:	2378      	movs	r3, #120	; 0x78
 8003864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003868:	4864      	ldr	r0, [pc, #400]	; (80039fc <_printf_i+0x220>)
 800386a:	e055      	b.n	8003918 <_printf_i+0x13c>
 800386c:	6813      	ldr	r3, [r2, #0]
 800386e:	1d19      	adds	r1, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6011      	str	r1, [r2, #0]
 8003874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e08c      	b.n	800399a <_printf_i+0x1be>
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6011      	str	r1, [r2, #0]
 8003884:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003888:	bf18      	it	ne
 800388a:	b21b      	sxthne	r3, r3
 800388c:	e7cf      	b.n	800382e <_printf_i+0x52>
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	6825      	ldr	r5, [r4, #0]
 8003892:	1d18      	adds	r0, r3, #4
 8003894:	6010      	str	r0, [r2, #0]
 8003896:	0628      	lsls	r0, r5, #24
 8003898:	d501      	bpl.n	800389e <_printf_i+0xc2>
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e002      	b.n	80038a4 <_printf_i+0xc8>
 800389e:	0668      	lsls	r0, r5, #25
 80038a0:	d5fb      	bpl.n	800389a <_printf_i+0xbe>
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	4854      	ldr	r0, [pc, #336]	; (80039f8 <_printf_i+0x21c>)
 80038a6:	296f      	cmp	r1, #111	; 0x6f
 80038a8:	bf14      	ite	ne
 80038aa:	220a      	movne	r2, #10
 80038ac:	2208      	moveq	r2, #8
 80038ae:	2100      	movs	r1, #0
 80038b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b4:	6865      	ldr	r5, [r4, #4]
 80038b6:	60a5      	str	r5, [r4, #8]
 80038b8:	2d00      	cmp	r5, #0
 80038ba:	f2c0 8095 	blt.w	80039e8 <_printf_i+0x20c>
 80038be:	6821      	ldr	r1, [r4, #0]
 80038c0:	f021 0104 	bic.w	r1, r1, #4
 80038c4:	6021      	str	r1, [r4, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d13d      	bne.n	8003946 <_printf_i+0x16a>
 80038ca:	2d00      	cmp	r5, #0
 80038cc:	f040 808e 	bne.w	80039ec <_printf_i+0x210>
 80038d0:	4665      	mov	r5, ip
 80038d2:	2a08      	cmp	r2, #8
 80038d4:	d10b      	bne.n	80038ee <_printf_i+0x112>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	07db      	lsls	r3, r3, #31
 80038da:	d508      	bpl.n	80038ee <_printf_i+0x112>
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	bfde      	ittt	le
 80038e4:	2330      	movle	r3, #48	; 0x30
 80038e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038ee:	ebac 0305 	sub.w	r3, ip, r5
 80038f2:	6123      	str	r3, [r4, #16]
 80038f4:	f8cd 8000 	str.w	r8, [sp]
 80038f8:	463b      	mov	r3, r7
 80038fa:	aa03      	add	r2, sp, #12
 80038fc:	4621      	mov	r1, r4
 80038fe:	4630      	mov	r0, r6
 8003900:	f7ff fef6 	bl	80036f0 <_printf_common>
 8003904:	3001      	adds	r0, #1
 8003906:	d14d      	bne.n	80039a4 <_printf_i+0x1c8>
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	b005      	add	sp, #20
 800390e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003912:	4839      	ldr	r0, [pc, #228]	; (80039f8 <_printf_i+0x21c>)
 8003914:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003918:	6813      	ldr	r3, [r2, #0]
 800391a:	6821      	ldr	r1, [r4, #0]
 800391c:	1d1d      	adds	r5, r3, #4
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6015      	str	r5, [r2, #0]
 8003922:	060a      	lsls	r2, r1, #24
 8003924:	d50b      	bpl.n	800393e <_printf_i+0x162>
 8003926:	07ca      	lsls	r2, r1, #31
 8003928:	bf44      	itt	mi
 800392a:	f041 0120 	orrmi.w	r1, r1, #32
 800392e:	6021      	strmi	r1, [r4, #0]
 8003930:	b91b      	cbnz	r3, 800393a <_printf_i+0x15e>
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	f022 0220 	bic.w	r2, r2, #32
 8003938:	6022      	str	r2, [r4, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	e7b7      	b.n	80038ae <_printf_i+0xd2>
 800393e:	064d      	lsls	r5, r1, #25
 8003940:	bf48      	it	mi
 8003942:	b29b      	uxthmi	r3, r3
 8003944:	e7ef      	b.n	8003926 <_printf_i+0x14a>
 8003946:	4665      	mov	r5, ip
 8003948:	fbb3 f1f2 	udiv	r1, r3, r2
 800394c:	fb02 3311 	mls	r3, r2, r1, r3
 8003950:	5cc3      	ldrb	r3, [r0, r3]
 8003952:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003956:	460b      	mov	r3, r1
 8003958:	2900      	cmp	r1, #0
 800395a:	d1f5      	bne.n	8003948 <_printf_i+0x16c>
 800395c:	e7b9      	b.n	80038d2 <_printf_i+0xf6>
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	6825      	ldr	r5, [r4, #0]
 8003962:	6961      	ldr	r1, [r4, #20]
 8003964:	1d18      	adds	r0, r3, #4
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	0628      	lsls	r0, r5, #24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	d501      	bpl.n	8003972 <_printf_i+0x196>
 800396e:	6019      	str	r1, [r3, #0]
 8003970:	e002      	b.n	8003978 <_printf_i+0x19c>
 8003972:	066a      	lsls	r2, r5, #25
 8003974:	d5fb      	bpl.n	800396e <_printf_i+0x192>
 8003976:	8019      	strh	r1, [r3, #0]
 8003978:	2300      	movs	r3, #0
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	4665      	mov	r5, ip
 800397e:	e7b9      	b.n	80038f4 <_printf_i+0x118>
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	1d19      	adds	r1, r3, #4
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	681d      	ldr	r5, [r3, #0]
 8003988:	6862      	ldr	r2, [r4, #4]
 800398a:	2100      	movs	r1, #0
 800398c:	4628      	mov	r0, r5
 800398e:	f7fc fc1f 	bl	80001d0 <memchr>
 8003992:	b108      	cbz	r0, 8003998 <_printf_i+0x1bc>
 8003994:	1b40      	subs	r0, r0, r5
 8003996:	6060      	str	r0, [r4, #4]
 8003998:	6863      	ldr	r3, [r4, #4]
 800399a:	6123      	str	r3, [r4, #16]
 800399c:	2300      	movs	r3, #0
 800399e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a2:	e7a7      	b.n	80038f4 <_printf_i+0x118>
 80039a4:	6923      	ldr	r3, [r4, #16]
 80039a6:	462a      	mov	r2, r5
 80039a8:	4639      	mov	r1, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	47c0      	blx	r8
 80039ae:	3001      	adds	r0, #1
 80039b0:	d0aa      	beq.n	8003908 <_printf_i+0x12c>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	079b      	lsls	r3, r3, #30
 80039b6:	d413      	bmi.n	80039e0 <_printf_i+0x204>
 80039b8:	68e0      	ldr	r0, [r4, #12]
 80039ba:	9b03      	ldr	r3, [sp, #12]
 80039bc:	4298      	cmp	r0, r3
 80039be:	bfb8      	it	lt
 80039c0:	4618      	movlt	r0, r3
 80039c2:	e7a3      	b.n	800390c <_printf_i+0x130>
 80039c4:	2301      	movs	r3, #1
 80039c6:	464a      	mov	r2, r9
 80039c8:	4639      	mov	r1, r7
 80039ca:	4630      	mov	r0, r6
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d09a      	beq.n	8003908 <_printf_i+0x12c>
 80039d2:	3501      	adds	r5, #1
 80039d4:	68e3      	ldr	r3, [r4, #12]
 80039d6:	9a03      	ldr	r2, [sp, #12]
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	42ab      	cmp	r3, r5
 80039dc:	dcf2      	bgt.n	80039c4 <_printf_i+0x1e8>
 80039de:	e7eb      	b.n	80039b8 <_printf_i+0x1dc>
 80039e0:	2500      	movs	r5, #0
 80039e2:	f104 0919 	add.w	r9, r4, #25
 80039e6:	e7f5      	b.n	80039d4 <_printf_i+0x1f8>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ac      	bne.n	8003946 <_printf_i+0x16a>
 80039ec:	7803      	ldrb	r3, [r0, #0]
 80039ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f6:	e76c      	b.n	80038d2 <_printf_i+0xf6>
 80039f8:	080040a1 	.word	0x080040a1
 80039fc:	080040b2 	.word	0x080040b2

08003a00 <_sbrk_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4c06      	ldr	r4, [pc, #24]	; (8003a1c <_sbrk_r+0x1c>)
 8003a04:	2300      	movs	r3, #0
 8003a06:	4605      	mov	r5, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	f7ff fb36 	bl	800307c <_sbrk>
 8003a10:	1c43      	adds	r3, r0, #1
 8003a12:	d102      	bne.n	8003a1a <_sbrk_r+0x1a>
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	b103      	cbz	r3, 8003a1a <_sbrk_r+0x1a>
 8003a18:	602b      	str	r3, [r5, #0]
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
 8003a1c:	20000104 	.word	0x20000104

08003a20 <__sread>:
 8003a20:	b510      	push	{r4, lr}
 8003a22:	460c      	mov	r4, r1
 8003a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a28:	f000 fa96 	bl	8003f58 <_read_r>
 8003a2c:	2800      	cmp	r0, #0
 8003a2e:	bfab      	itete	ge
 8003a30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a32:	89a3      	ldrhlt	r3, [r4, #12]
 8003a34:	181b      	addge	r3, r3, r0
 8003a36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a3a:	bfac      	ite	ge
 8003a3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a3e:	81a3      	strhlt	r3, [r4, #12]
 8003a40:	bd10      	pop	{r4, pc}

08003a42 <__swrite>:
 8003a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a46:	461f      	mov	r7, r3
 8003a48:	898b      	ldrh	r3, [r1, #12]
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	460c      	mov	r4, r1
 8003a50:	4616      	mov	r6, r2
 8003a52:	d505      	bpl.n	8003a60 <__swrite+0x1e>
 8003a54:	2302      	movs	r3, #2
 8003a56:	2200      	movs	r2, #0
 8003a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5c:	f000 f9b6 	bl	8003dcc <_lseek_r>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	4628      	mov	r0, r5
 8003a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a76:	f000 b869 	b.w	8003b4c <_write_r>

08003a7a <__sseek>:
 8003a7a:	b510      	push	{r4, lr}
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a82:	f000 f9a3 	bl	8003dcc <_lseek_r>
 8003a86:	1c43      	adds	r3, r0, #1
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	bf15      	itete	ne
 8003a8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a96:	81a3      	strheq	r3, [r4, #12]
 8003a98:	bf18      	it	ne
 8003a9a:	81a3      	strhne	r3, [r4, #12]
 8003a9c:	bd10      	pop	{r4, pc}

08003a9e <__sclose>:
 8003a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa2:	f000 b8d3 	b.w	8003c4c <_close_r>
	...

08003aa8 <__swbuf_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	460e      	mov	r6, r1
 8003aac:	4614      	mov	r4, r2
 8003aae:	4605      	mov	r5, r0
 8003ab0:	b118      	cbz	r0, 8003aba <__swbuf_r+0x12>
 8003ab2:	6983      	ldr	r3, [r0, #24]
 8003ab4:	b90b      	cbnz	r3, 8003aba <__swbuf_r+0x12>
 8003ab6:	f7ff fbf7 	bl	80032a8 <__sinit>
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <__swbuf_r+0x98>)
 8003abc:	429c      	cmp	r4, r3
 8003abe:	d12a      	bne.n	8003b16 <__swbuf_r+0x6e>
 8003ac0:	686c      	ldr	r4, [r5, #4]
 8003ac2:	69a3      	ldr	r3, [r4, #24]
 8003ac4:	60a3      	str	r3, [r4, #8]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	071a      	lsls	r2, r3, #28
 8003aca:	d52e      	bpl.n	8003b2a <__swbuf_r+0x82>
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	b363      	cbz	r3, 8003b2a <__swbuf_r+0x82>
 8003ad0:	6923      	ldr	r3, [r4, #16]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	1ac0      	subs	r0, r0, r3
 8003ad6:	6963      	ldr	r3, [r4, #20]
 8003ad8:	b2f6      	uxtb	r6, r6
 8003ada:	4283      	cmp	r3, r0
 8003adc:	4637      	mov	r7, r6
 8003ade:	dc04      	bgt.n	8003aea <__swbuf_r+0x42>
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	4628      	mov	r0, r5
 8003ae4:	f000 f948 	bl	8003d78 <_fflush_r>
 8003ae8:	bb28      	cbnz	r0, 8003b36 <__swbuf_r+0x8e>
 8003aea:	68a3      	ldr	r3, [r4, #8]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	60a3      	str	r3, [r4, #8]
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	6022      	str	r2, [r4, #0]
 8003af6:	701e      	strb	r6, [r3, #0]
 8003af8:	6963      	ldr	r3, [r4, #20]
 8003afa:	3001      	adds	r0, #1
 8003afc:	4283      	cmp	r3, r0
 8003afe:	d004      	beq.n	8003b0a <__swbuf_r+0x62>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	07db      	lsls	r3, r3, #31
 8003b04:	d519      	bpl.n	8003b3a <__swbuf_r+0x92>
 8003b06:	2e0a      	cmp	r6, #10
 8003b08:	d117      	bne.n	8003b3a <__swbuf_r+0x92>
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 f933 	bl	8003d78 <_fflush_r>
 8003b12:	b190      	cbz	r0, 8003b3a <__swbuf_r+0x92>
 8003b14:	e00f      	b.n	8003b36 <__swbuf_r+0x8e>
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <__swbuf_r+0x9c>)
 8003b18:	429c      	cmp	r4, r3
 8003b1a:	d101      	bne.n	8003b20 <__swbuf_r+0x78>
 8003b1c:	68ac      	ldr	r4, [r5, #8]
 8003b1e:	e7d0      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <__swbuf_r+0xa0>)
 8003b22:	429c      	cmp	r4, r3
 8003b24:	bf08      	it	eq
 8003b26:	68ec      	ldreq	r4, [r5, #12]
 8003b28:	e7cb      	b.n	8003ac2 <__swbuf_r+0x1a>
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	f000 f81f 	bl	8003b70 <__swsetup_r>
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0cc      	beq.n	8003ad0 <__swbuf_r+0x28>
 8003b36:	f04f 37ff 	mov.w	r7, #4294967295
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	08004050 	.word	0x08004050
 8003b44:	08004070 	.word	0x08004070
 8003b48:	08004030 	.word	0x08004030

08003b4c <_write_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4c07      	ldr	r4, [pc, #28]	; (8003b6c <_write_r+0x20>)
 8003b50:	4605      	mov	r5, r0
 8003b52:	4608      	mov	r0, r1
 8003b54:	4611      	mov	r1, r2
 8003b56:	2200      	movs	r2, #0
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f7ff fa3d 	bl	8002fda <_write>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_write_r+0x1e>
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_write_r+0x1e>
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	20000104 	.word	0x20000104

08003b70 <__swsetup_r>:
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <__swsetup_r+0xcc>)
 8003b72:	b570      	push	{r4, r5, r6, lr}
 8003b74:	681d      	ldr	r5, [r3, #0]
 8003b76:	4606      	mov	r6, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b125      	cbz	r5, 8003b86 <__swsetup_r+0x16>
 8003b7c:	69ab      	ldr	r3, [r5, #24]
 8003b7e:	b913      	cbnz	r3, 8003b86 <__swsetup_r+0x16>
 8003b80:	4628      	mov	r0, r5
 8003b82:	f7ff fb91 	bl	80032a8 <__sinit>
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <__swsetup_r+0xd0>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d10f      	bne.n	8003bac <__swsetup_r+0x3c>
 8003b8c:	686c      	ldr	r4, [r5, #4]
 8003b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	0715      	lsls	r5, r2, #28
 8003b96:	d42c      	bmi.n	8003bf2 <__swsetup_r+0x82>
 8003b98:	06d0      	lsls	r0, r2, #27
 8003b9a:	d411      	bmi.n	8003bc0 <__swsetup_r+0x50>
 8003b9c:	2209      	movs	r2, #9
 8003b9e:	6032      	str	r2, [r6, #0]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e03e      	b.n	8003c2a <__swsetup_r+0xba>
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <__swsetup_r+0xd4>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d101      	bne.n	8003bb6 <__swsetup_r+0x46>
 8003bb2:	68ac      	ldr	r4, [r5, #8]
 8003bb4:	e7eb      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <__swsetup_r+0xd8>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	bf08      	it	eq
 8003bbc:	68ec      	ldreq	r4, [r5, #12]
 8003bbe:	e7e6      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bc0:	0751      	lsls	r1, r2, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x7a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x6a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x66>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 f973 	bl	8003ebc <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x9a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x9a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f917 	bl	8003e38 <__smakebuf_r>
 8003c0a:	89a2      	ldrh	r2, [r4, #12]
 8003c0c:	f012 0301 	ands.w	r3, r2, #1
 8003c10:	d00c      	beq.n	8003c2c <__swsetup_r+0xbc>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	6963      	ldr	r3, [r4, #20]
 8003c18:	425b      	negs	r3, r3
 8003c1a:	61a3      	str	r3, [r4, #24]
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	b953      	cbnz	r3, 8003c36 <__swsetup_r+0xc6>
 8003c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c28:	d1ba      	bne.n	8003ba0 <__swsetup_r+0x30>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	0792      	lsls	r2, r2, #30
 8003c2e:	bf58      	it	pl
 8003c30:	6963      	ldrpl	r3, [r4, #20]
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	e7f2      	b.n	8003c1c <__swsetup_r+0xac>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7f7      	b.n	8003c2a <__swsetup_r+0xba>
 8003c3a:	bf00      	nop
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	08004050 	.word	0x08004050
 8003c44:	08004070 	.word	0x08004070
 8003c48:	08004030 	.word	0x08004030

08003c4c <_close_r>:
 8003c4c:	b538      	push	{r3, r4, r5, lr}
 8003c4e:	4c06      	ldr	r4, [pc, #24]	; (8003c68 <_close_r+0x1c>)
 8003c50:	2300      	movs	r3, #0
 8003c52:	4605      	mov	r5, r0
 8003c54:	4608      	mov	r0, r1
 8003c56:	6023      	str	r3, [r4, #0]
 8003c58:	f7ff f9db 	bl	8003012 <_close>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_close_r+0x1a>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_close_r+0x1a>
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20000104 	.word	0x20000104

08003c6c <__sflush_r>:
 8003c6c:	898a      	ldrh	r2, [r1, #12]
 8003c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	0710      	lsls	r0, r2, #28
 8003c76:	460c      	mov	r4, r1
 8003c78:	d458      	bmi.n	8003d2c <__sflush_r+0xc0>
 8003c7a:	684b      	ldr	r3, [r1, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	dc05      	bgt.n	8003c8c <__sflush_r+0x20>
 8003c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	dc02      	bgt.n	8003c8c <__sflush_r+0x20>
 8003c86:	2000      	movs	r0, #0
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	d0f9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003c92:	2300      	movs	r3, #0
 8003c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c98:	682f      	ldr	r7, [r5, #0]
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	602b      	str	r3, [r5, #0]
 8003c9e:	d032      	beq.n	8003d06 <__sflush_r+0x9a>
 8003ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	075a      	lsls	r2, r3, #29
 8003ca6:	d505      	bpl.n	8003cb4 <__sflush_r+0x48>
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	1ac0      	subs	r0, r0, r3
 8003cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003cae:	b10b      	cbz	r3, 8003cb4 <__sflush_r+0x48>
 8003cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003cb2:	1ac0      	subs	r0, r0, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cba:	6a21      	ldr	r1, [r4, #32]
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b0      	blx	r6
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	d106      	bne.n	8003cd4 <__sflush_r+0x68>
 8003cc6:	6829      	ldr	r1, [r5, #0]
 8003cc8:	291d      	cmp	r1, #29
 8003cca:	d848      	bhi.n	8003d5e <__sflush_r+0xf2>
 8003ccc:	4a29      	ldr	r2, [pc, #164]	; (8003d74 <__sflush_r+0x108>)
 8003cce:	40ca      	lsrs	r2, r1
 8003cd0:	07d6      	lsls	r6, r2, #31
 8003cd2:	d544      	bpl.n	8003d5e <__sflush_r+0xf2>
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	6062      	str	r2, [r4, #4]
 8003cd8:	04d9      	lsls	r1, r3, #19
 8003cda:	6922      	ldr	r2, [r4, #16]
 8003cdc:	6022      	str	r2, [r4, #0]
 8003cde:	d504      	bpl.n	8003cea <__sflush_r+0x7e>
 8003ce0:	1c42      	adds	r2, r0, #1
 8003ce2:	d101      	bne.n	8003ce8 <__sflush_r+0x7c>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b903      	cbnz	r3, 8003cea <__sflush_r+0x7e>
 8003ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cec:	602f      	str	r7, [r5, #0]
 8003cee:	2900      	cmp	r1, #0
 8003cf0:	d0c9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	d002      	beq.n	8003d00 <__sflush_r+0x94>
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f000 f8de 	bl	8003ebc <_free_r>
 8003d00:	2000      	movs	r0, #0
 8003d02:	6360      	str	r0, [r4, #52]	; 0x34
 8003d04:	e7c0      	b.n	8003c88 <__sflush_r+0x1c>
 8003d06:	2301      	movs	r3, #1
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b0      	blx	r6
 8003d0c:	1c41      	adds	r1, r0, #1
 8003d0e:	d1c8      	bne.n	8003ca2 <__sflush_r+0x36>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0c5      	beq.n	8003ca2 <__sflush_r+0x36>
 8003d16:	2b1d      	cmp	r3, #29
 8003d18:	d001      	beq.n	8003d1e <__sflush_r+0xb2>
 8003d1a:	2b16      	cmp	r3, #22
 8003d1c:	d101      	bne.n	8003d22 <__sflush_r+0xb6>
 8003d1e:	602f      	str	r7, [r5, #0]
 8003d20:	e7b1      	b.n	8003c86 <__sflush_r+0x1a>
 8003d22:	89a3      	ldrh	r3, [r4, #12]
 8003d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d28:	81a3      	strh	r3, [r4, #12]
 8003d2a:	e7ad      	b.n	8003c88 <__sflush_r+0x1c>
 8003d2c:	690f      	ldr	r7, [r1, #16]
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	d0a9      	beq.n	8003c86 <__sflush_r+0x1a>
 8003d32:	0793      	lsls	r3, r2, #30
 8003d34:	680e      	ldr	r6, [r1, #0]
 8003d36:	bf08      	it	eq
 8003d38:	694b      	ldreq	r3, [r1, #20]
 8003d3a:	600f      	str	r7, [r1, #0]
 8003d3c:	bf18      	it	ne
 8003d3e:	2300      	movne	r3, #0
 8003d40:	eba6 0807 	sub.w	r8, r6, r7
 8003d44:	608b      	str	r3, [r1, #8]
 8003d46:	f1b8 0f00 	cmp.w	r8, #0
 8003d4a:	dd9c      	ble.n	8003c86 <__sflush_r+0x1a>
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	463a      	mov	r2, r7
 8003d50:	6a21      	ldr	r1, [r4, #32]
 8003d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b0      	blx	r6
 8003d58:	2800      	cmp	r0, #0
 8003d5a:	dc06      	bgt.n	8003d6a <__sflush_r+0xfe>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d62:	81a3      	strh	r3, [r4, #12]
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	e78e      	b.n	8003c88 <__sflush_r+0x1c>
 8003d6a:	4407      	add	r7, r0
 8003d6c:	eba8 0800 	sub.w	r8, r8, r0
 8003d70:	e7e9      	b.n	8003d46 <__sflush_r+0xda>
 8003d72:	bf00      	nop
 8003d74:	20400001 	.word	0x20400001

08003d78 <_fflush_r>:
 8003d78:	b538      	push	{r3, r4, r5, lr}
 8003d7a:	690b      	ldr	r3, [r1, #16]
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	b1db      	cbz	r3, 8003dba <_fflush_r+0x42>
 8003d82:	b118      	cbz	r0, 8003d8c <_fflush_r+0x14>
 8003d84:	6983      	ldr	r3, [r0, #24]
 8003d86:	b90b      	cbnz	r3, 8003d8c <_fflush_r+0x14>
 8003d88:	f7ff fa8e 	bl	80032a8 <__sinit>
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <_fflush_r+0x48>)
 8003d8e:	429c      	cmp	r4, r3
 8003d90:	d109      	bne.n	8003da6 <_fflush_r+0x2e>
 8003d92:	686c      	ldr	r4, [r5, #4]
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	b17b      	cbz	r3, 8003dba <_fflush_r+0x42>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003da2:	f7ff bf63 	b.w	8003c6c <__sflush_r>
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <_fflush_r+0x4c>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d101      	bne.n	8003db0 <_fflush_r+0x38>
 8003dac:	68ac      	ldr	r4, [r5, #8]
 8003dae:	e7f1      	b.n	8003d94 <_fflush_r+0x1c>
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <_fflush_r+0x50>)
 8003db2:	429c      	cmp	r4, r3
 8003db4:	bf08      	it	eq
 8003db6:	68ec      	ldreq	r4, [r5, #12]
 8003db8:	e7ec      	b.n	8003d94 <_fflush_r+0x1c>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	bd38      	pop	{r3, r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08004050 	.word	0x08004050
 8003dc4:	08004070 	.word	0x08004070
 8003dc8:	08004030 	.word	0x08004030

08003dcc <_lseek_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4c07      	ldr	r4, [pc, #28]	; (8003dec <_lseek_r+0x20>)
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	4608      	mov	r0, r1
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	6022      	str	r2, [r4, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f7ff f940 	bl	8003060 <_lseek>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_lseek_r+0x1e>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_lseek_r+0x1e>
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000104 	.word	0x20000104

08003df0 <__swhatbuf_r>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	460e      	mov	r6, r1
 8003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df8:	2900      	cmp	r1, #0
 8003dfa:	b096      	sub	sp, #88	; 0x58
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	da07      	bge.n	8003e12 <__swhatbuf_r+0x22>
 8003e02:	2300      	movs	r3, #0
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	89b3      	ldrh	r3, [r6, #12]
 8003e08:	061a      	lsls	r2, r3, #24
 8003e0a:	d410      	bmi.n	8003e2e <__swhatbuf_r+0x3e>
 8003e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e10:	e00e      	b.n	8003e30 <__swhatbuf_r+0x40>
 8003e12:	466a      	mov	r2, sp
 8003e14:	f000 f8b2 	bl	8003f7c <_fstat_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	dbf2      	blt.n	8003e02 <__swhatbuf_r+0x12>
 8003e1c:	9a01      	ldr	r2, [sp, #4]
 8003e1e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e22:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e26:	425a      	negs	r2, r3
 8003e28:	415a      	adcs	r2, r3
 8003e2a:	602a      	str	r2, [r5, #0]
 8003e2c:	e7ee      	b.n	8003e0c <__swhatbuf_r+0x1c>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	2000      	movs	r0, #0
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	b016      	add	sp, #88	; 0x58
 8003e36:	bd70      	pop	{r4, r5, r6, pc}

08003e38 <__smakebuf_r>:
 8003e38:	898b      	ldrh	r3, [r1, #12]
 8003e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e3c:	079d      	lsls	r5, r3, #30
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	d507      	bpl.n	8003e54 <__smakebuf_r+0x1c>
 8003e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6163      	str	r3, [r4, #20]
 8003e50:	b002      	add	sp, #8
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	ab01      	add	r3, sp, #4
 8003e56:	466a      	mov	r2, sp
 8003e58:	f7ff ffca 	bl	8003df0 <__swhatbuf_r>
 8003e5c:	9900      	ldr	r1, [sp, #0]
 8003e5e:	4605      	mov	r5, r0
 8003e60:	4630      	mov	r0, r6
 8003e62:	f7ff faab 	bl	80033bc <_malloc_r>
 8003e66:	b948      	cbnz	r0, 8003e7c <__smakebuf_r+0x44>
 8003e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e6c:	059a      	lsls	r2, r3, #22
 8003e6e:	d4ef      	bmi.n	8003e50 <__smakebuf_r+0x18>
 8003e70:	f023 0303 	bic.w	r3, r3, #3
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	e7e3      	b.n	8003e44 <__smakebuf_r+0xc>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <__smakebuf_r+0x7c>)
 8003e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	6020      	str	r0, [r4, #0]
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	9b00      	ldr	r3, [sp, #0]
 8003e8c:	6163      	str	r3, [r4, #20]
 8003e8e:	9b01      	ldr	r3, [sp, #4]
 8003e90:	6120      	str	r0, [r4, #16]
 8003e92:	b15b      	cbz	r3, 8003eac <__smakebuf_r+0x74>
 8003e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f881 	bl	8003fa0 <_isatty_r>
 8003e9e:	b128      	cbz	r0, 8003eac <__smakebuf_r+0x74>
 8003ea0:	89a3      	ldrh	r3, [r4, #12]
 8003ea2:	f023 0303 	bic.w	r3, r3, #3
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	81a3      	strh	r3, [r4, #12]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	431d      	orrs	r5, r3
 8003eb0:	81a5      	strh	r5, [r4, #12]
 8003eb2:	e7cd      	b.n	8003e50 <__smakebuf_r+0x18>
 8003eb4:	08003271 	.word	0x08003271

08003eb8 <__malloc_lock>:
 8003eb8:	4770      	bx	lr

08003eba <__malloc_unlock>:
 8003eba:	4770      	bx	lr

08003ebc <_free_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4605      	mov	r5, r0
 8003ec0:	2900      	cmp	r1, #0
 8003ec2:	d045      	beq.n	8003f50 <_free_r+0x94>
 8003ec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec8:	1f0c      	subs	r4, r1, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bfb8      	it	lt
 8003ece:	18e4      	addlt	r4, r4, r3
 8003ed0:	f7ff fff2 	bl	8003eb8 <__malloc_lock>
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	; (8003f54 <_free_r+0x98>)
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	4610      	mov	r0, r2
 8003eda:	b933      	cbnz	r3, 8003eea <_free_r+0x2e>
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6014      	str	r4, [r2, #0]
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ee6:	f7ff bfe8 	b.w	8003eba <__malloc_unlock>
 8003eea:	42a3      	cmp	r3, r4
 8003eec:	d90c      	bls.n	8003f08 <_free_r+0x4c>
 8003eee:	6821      	ldr	r1, [r4, #0]
 8003ef0:	1862      	adds	r2, r4, r1
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bf04      	itt	eq
 8003ef6:	681a      	ldreq	r2, [r3, #0]
 8003ef8:	685b      	ldreq	r3, [r3, #4]
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	bf04      	itt	eq
 8003efe:	1852      	addeq	r2, r2, r1
 8003f00:	6022      	streq	r2, [r4, #0]
 8003f02:	6004      	str	r4, [r0, #0]
 8003f04:	e7ec      	b.n	8003ee0 <_free_r+0x24>
 8003f06:	4613      	mov	r3, r2
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	b10a      	cbz	r2, 8003f10 <_free_r+0x54>
 8003f0c:	42a2      	cmp	r2, r4
 8003f0e:	d9fa      	bls.n	8003f06 <_free_r+0x4a>
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	1858      	adds	r0, r3, r1
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d10b      	bne.n	8003f30 <_free_r+0x74>
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	1858      	adds	r0, r3, r1
 8003f1e:	4282      	cmp	r2, r0
 8003f20:	6019      	str	r1, [r3, #0]
 8003f22:	d1dd      	bne.n	8003ee0 <_free_r+0x24>
 8003f24:	6810      	ldr	r0, [r2, #0]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	4401      	add	r1, r0
 8003f2c:	6019      	str	r1, [r3, #0]
 8003f2e:	e7d7      	b.n	8003ee0 <_free_r+0x24>
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x7c>
 8003f32:	230c      	movs	r3, #12
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	e7d3      	b.n	8003ee0 <_free_r+0x24>
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	1821      	adds	r1, r4, r0
 8003f3c:	428a      	cmp	r2, r1
 8003f3e:	bf04      	itt	eq
 8003f40:	6811      	ldreq	r1, [r2, #0]
 8003f42:	6852      	ldreq	r2, [r2, #4]
 8003f44:	6062      	str	r2, [r4, #4]
 8003f46:	bf04      	itt	eq
 8003f48:	1809      	addeq	r1, r1, r0
 8003f4a:	6021      	streq	r1, [r4, #0]
 8003f4c:	605c      	str	r4, [r3, #4]
 8003f4e:	e7c7      	b.n	8003ee0 <_free_r+0x24>
 8003f50:	bd38      	pop	{r3, r4, r5, pc}
 8003f52:	bf00      	nop
 8003f54:	20000090 	.word	0x20000090

08003f58 <_read_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4c07      	ldr	r4, [pc, #28]	; (8003f78 <_read_r+0x20>)
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	4608      	mov	r0, r1
 8003f60:	4611      	mov	r1, r2
 8003f62:	2200      	movs	r2, #0
 8003f64:	6022      	str	r2, [r4, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7ff f81a 	bl	8002fa0 <_read>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_read_r+0x1e>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_read_r+0x1e>
 8003f74:	602b      	str	r3, [r5, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	20000104 	.word	0x20000104

08003f7c <_fstat_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4c07      	ldr	r4, [pc, #28]	; (8003f9c <_fstat_r+0x20>)
 8003f80:	2300      	movs	r3, #0
 8003f82:	4605      	mov	r5, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	f7ff f84e 	bl	800302a <_fstat>
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	d102      	bne.n	8003f98 <_fstat_r+0x1c>
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	b103      	cbz	r3, 8003f98 <_fstat_r+0x1c>
 8003f96:	602b      	str	r3, [r5, #0]
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000104 	.word	0x20000104

08003fa0 <_isatty_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	4c06      	ldr	r4, [pc, #24]	; (8003fbc <_isatty_r+0x1c>)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f7ff f84d 	bl	800304a <_isatty>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_isatty_r+0x1a>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_isatty_r+0x1a>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000104 	.word	0x20000104

08003fc0 <_init>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	bf00      	nop
 8003fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc6:	bc08      	pop	{r3}
 8003fc8:	469e      	mov	lr, r3
 8003fca:	4770      	bx	lr

08003fcc <_fini>:
 8003fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fce:	bf00      	nop
 8003fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fd2:	bc08      	pop	{r3}
 8003fd4:	469e      	mov	lr, r3
 8003fd6:	4770      	bx	lr
